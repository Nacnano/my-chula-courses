
Lab3-3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000455c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080046fc  080046fc  000146fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004754  08004754  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004754  08004754  00014754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800475c  0800475c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800475c  0800475c  0001475c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004760  08004760  00014760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004764  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  2000005c  080047c0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  080047c0  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d0ab  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d35  00000000  00000000  0002d17a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c60  00000000  00000000  0002eeb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009b7  00000000  00000000  0002fb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000159b7  00000000  00000000  000304c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e102  00000000  00000000  00045e7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bc49  00000000  00000000  00053f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003924  00000000  00000000  000dfbcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000e34f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080046e4 	.word	0x080046e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080046e4 	.word	0x080046e4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */

int internalCount = 0;
int externalCount = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b09e      	sub	sp, #120	; 0x78
 8000590:	af02      	add	r7, sp, #8
 8000592:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	4a20      	ldr	r2, [pc, #128]	; (8000618 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d109      	bne.n	80005b0 <HAL_TIM_PeriodElapsedCallback+0x24>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800059c:	2120      	movs	r1, #32
 800059e:	481f      	ldr	r0, [pc, #124]	; (800061c <HAL_TIM_PeriodElapsedCallback+0x90>)
 80005a0:	f001 f8a7 	bl	80016f2 <HAL_GPIO_TogglePin>
		internalCount += 1;
 80005a4:	4b1e      	ldr	r3, [pc, #120]	; (8000620 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	3301      	adds	r3, #1
 80005aa:	4a1d      	ldr	r2, [pc, #116]	; (8000620 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80005ac:	6013      	str	r3, [r2, #0]
		int currentTime = HAL_GetTick();
		  char buf[100];
		  sprintf(buf, "%d %d %d \r\n", currentTime, internalCount, externalCount);
		  HAL_UART_Transmit (&huart2, buf, strlen(buf), 10);
	}
}
 80005ae:	e02f      	b.n	8000610 <HAL_TIM_PeriodElapsedCallback+0x84>
	else if (htim == &htim11) {
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	4a1c      	ldr	r2, [pc, #112]	; (8000624 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80005b4:	4293      	cmp	r3, r2
 80005b6:	d10a      	bne.n	80005ce <HAL_TIM_PeriodElapsedCallback+0x42>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_13);
 80005b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005bc:	4817      	ldr	r0, [pc, #92]	; (800061c <HAL_TIM_PeriodElapsedCallback+0x90>)
 80005be:	f001 f898 	bl	80016f2 <HAL_GPIO_TogglePin>
		externalCount += 1;
 80005c2:	4b19      	ldr	r3, [pc, #100]	; (8000628 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	3301      	adds	r3, #1
 80005c8:	4a17      	ldr	r2, [pc, #92]	; (8000628 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80005ca:	6013      	str	r3, [r2, #0]
}
 80005cc:	e020      	b.n	8000610 <HAL_TIM_PeriodElapsedCallback+0x84>
	else if (htim == &htim10) {
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4a16      	ldr	r2, [pc, #88]	; (800062c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d11c      	bne.n	8000610 <HAL_TIM_PeriodElapsedCallback+0x84>
		int currentTime = HAL_GetTick();
 80005d6:	f000 fd3f 	bl	8001058 <HAL_GetTick>
 80005da:	4603      	mov	r3, r0
 80005dc:	66fb      	str	r3, [r7, #108]	; 0x6c
		  sprintf(buf, "%d %d %d \r\n", currentTime, internalCount, externalCount);
 80005de:	4b10      	ldr	r3, [pc, #64]	; (8000620 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	4b11      	ldr	r3, [pc, #68]	; (8000628 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f107 0008 	add.w	r0, r7, #8
 80005ea:	9300      	str	r3, [sp, #0]
 80005ec:	4613      	mov	r3, r2
 80005ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80005f0:	490f      	ldr	r1, [pc, #60]	; (8000630 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80005f2:	f003 fbd3 	bl	8003d9c <siprintf>
		  HAL_UART_Transmit (&huart2, buf, strlen(buf), 10);
 80005f6:	f107 0308 	add.w	r3, r7, #8
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff fdf0 	bl	80001e0 <strlen>
 8000600:	4603      	mov	r3, r0
 8000602:	b29a      	uxth	r2, r3
 8000604:	f107 0108 	add.w	r1, r7, #8
 8000608:	230a      	movs	r3, #10
 800060a:	480a      	ldr	r0, [pc, #40]	; (8000634 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800060c:	f002 fc14 	bl	8002e38 <HAL_UART_Transmit>
}
 8000610:	bf00      	nop
 8000612:	3770      	adds	r7, #112	; 0x70
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000078 	.word	0x20000078
 800061c:	40020000 	.word	0x40020000
 8000620:	20000198 	.word	0x20000198
 8000624:	20000108 	.word	0x20000108
 8000628:	2000019c 	.word	0x2000019c
 800062c:	200000c0 	.word	0x200000c0
 8000630:	080046fc 	.word	0x080046fc
 8000634:	20000150 	.word	0x20000150

08000638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063c:	f000 fca6 	bl	8000f8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000640:	f000 f81a 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000644:	f000 f9c0 	bl	80009c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000648:	f000 f994 	bl	8000974 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800064c:	f000 f87e 	bl	800074c <MX_TIM3_Init>
  MX_TIM10_Init();
 8000650:	f000 f8f4 	bl	800083c <MX_TIM10_Init>
  MX_TIM11_Init();
 8000654:	f000 f940 	bl	80008d8 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000658:	4804      	ldr	r0, [pc, #16]	; (800066c <main+0x34>)
 800065a:	f001 fd71 	bl	8002140 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);
 800065e:	4804      	ldr	r0, [pc, #16]	; (8000670 <main+0x38>)
 8000660:	f001 fd6e 	bl	8002140 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8000664:	4803      	ldr	r0, [pc, #12]	; (8000674 <main+0x3c>)
 8000666:	f001 fd6b 	bl	8002140 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800066a:	e7fe      	b.n	800066a <main+0x32>
 800066c:	20000078 	.word	0x20000078
 8000670:	200000c0 	.word	0x200000c0
 8000674:	20000108 	.word	0x20000108

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b094      	sub	sp, #80	; 0x50
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0320 	add.w	r3, r7, #32
 8000682:	2230      	movs	r2, #48	; 0x30
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f003 fba8 	bl	8003ddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800069c:	2300      	movs	r3, #0
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	4b28      	ldr	r3, [pc, #160]	; (8000744 <SystemClock_Config+0xcc>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	4a27      	ldr	r2, [pc, #156]	; (8000744 <SystemClock_Config+0xcc>)
 80006a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006aa:	6413      	str	r3, [r2, #64]	; 0x40
 80006ac:	4b25      	ldr	r3, [pc, #148]	; (8000744 <SystemClock_Config+0xcc>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006b8:	2300      	movs	r3, #0
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	4b22      	ldr	r3, [pc, #136]	; (8000748 <SystemClock_Config+0xd0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006c4:	4a20      	ldr	r2, [pc, #128]	; (8000748 <SystemClock_Config+0xd0>)
 80006c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b1e      	ldr	r3, [pc, #120]	; (8000748 <SystemClock_Config+0xd0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d8:	2302      	movs	r3, #2
 80006da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006dc:	2301      	movs	r3, #1
 80006de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e0:	2310      	movs	r3, #16
 80006e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e4:	2302      	movs	r3, #2
 80006e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e8:	2300      	movs	r3, #0
 80006ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006ec:	2308      	movs	r3, #8
 80006ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 80006f0:	2350      	movs	r3, #80	; 0x50
 80006f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006f8:	2307      	movs	r3, #7
 80006fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fc:	f107 0320 	add.w	r3, r7, #32
 8000700:	4618      	mov	r0, r3
 8000702:	f001 f835 	bl	8001770 <HAL_RCC_OscConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800070c:	f000 fa06 	bl	8000b1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000710:	230f      	movs	r3, #15
 8000712:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000714:	2302      	movs	r3, #2
 8000716:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8000718:	23a0      	movs	r3, #160	; 0xa0
 800071a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800071c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000720:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000726:	f107 030c 	add.w	r3, r7, #12
 800072a:	2100      	movs	r1, #0
 800072c:	4618      	mov	r0, r3
 800072e:	f001 fa97 	bl	8001c60 <HAL_RCC_ClockConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000738:	f000 f9f0 	bl	8000b1c <Error_Handler>
  }
}
 800073c:	bf00      	nop
 800073e:	3750      	adds	r7, #80	; 0x50
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40023800 	.word	0x40023800
 8000748:	40007000 	.word	0x40007000

0800074c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08e      	sub	sp, #56	; 0x38
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000752:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000760:	f107 0320 	add.w	r3, r7, #32
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]
 8000778:	615a      	str	r2, [r3, #20]
 800077a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800077c:	4b2d      	ldr	r3, [pc, #180]	; (8000834 <MX_TIM3_Init+0xe8>)
 800077e:	4a2e      	ldr	r2, [pc, #184]	; (8000838 <MX_TIM3_Init+0xec>)
 8000780:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8000782:	4b2c      	ldr	r3, [pc, #176]	; (8000834 <MX_TIM3_Init+0xe8>)
 8000784:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000788:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800078a:	4b2a      	ldr	r3, [pc, #168]	; (8000834 <MX_TIM3_Init+0xe8>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000;
 8000790:	4b28      	ldr	r3, [pc, #160]	; (8000834 <MX_TIM3_Init+0xe8>)
 8000792:	f241 3288 	movw	r2, #5000	; 0x1388
 8000796:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000798:	4b26      	ldr	r3, [pc, #152]	; (8000834 <MX_TIM3_Init+0xe8>)
 800079a:	2200      	movs	r2, #0
 800079c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800079e:	4b25      	ldr	r3, [pc, #148]	; (8000834 <MX_TIM3_Init+0xe8>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007a4:	4823      	ldr	r0, [pc, #140]	; (8000834 <MX_TIM3_Init+0xe8>)
 80007a6:	f001 fc7b 	bl	80020a0 <HAL_TIM_Base_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80007b0:	f000 f9b4 	bl	8000b1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007be:	4619      	mov	r1, r3
 80007c0:	481c      	ldr	r0, [pc, #112]	; (8000834 <MX_TIM3_Init+0xe8>)
 80007c2:	f001 fec5 	bl	8002550 <HAL_TIM_ConfigClockSource>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80007cc:	f000 f9a6 	bl	8000b1c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80007d0:	4818      	ldr	r0, [pc, #96]	; (8000834 <MX_TIM3_Init+0xe8>)
 80007d2:	f001 fd17 	bl	8002204 <HAL_TIM_OC_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80007dc:	f000 f99e 	bl	8000b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e0:	2300      	movs	r3, #0
 80007e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e4:	2300      	movs	r3, #0
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007e8:	f107 0320 	add.w	r3, r7, #32
 80007ec:	4619      	mov	r1, r3
 80007ee:	4811      	ldr	r0, [pc, #68]	; (8000834 <MX_TIM3_Init+0xe8>)
 80007f0:	f002 fa50 	bl	8002c94 <HAL_TIMEx_MasterConfigSynchronization>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80007fa:	f000 f98f 	bl	8000b1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	2204      	movs	r2, #4
 8000812:	4619      	mov	r1, r3
 8000814:	4807      	ldr	r0, [pc, #28]	; (8000834 <MX_TIM3_Init+0xe8>)
 8000816:	f001 fe3f 	bl	8002498 <HAL_TIM_OC_ConfigChannel>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000820:	f000 f97c 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000824:	4803      	ldr	r0, [pc, #12]	; (8000834 <MX_TIM3_Init+0xe8>)
 8000826:	f000 fa0b 	bl	8000c40 <HAL_TIM_MspPostInit>

}
 800082a:	bf00      	nop
 800082c:	3738      	adds	r7, #56	; 0x38
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000078 	.word	0x20000078
 8000838:	40000400 	.word	0x40000400

0800083c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
 8000850:	615a      	str	r2, [r3, #20]
 8000852:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000854:	4b1e      	ldr	r3, [pc, #120]	; (80008d0 <MX_TIM10_Init+0x94>)
 8000856:	4a1f      	ldr	r2, [pc, #124]	; (80008d4 <MX_TIM10_Init+0x98>)
 8000858:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 999;
 800085a:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <MX_TIM10_Init+0x94>)
 800085c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000860:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000862:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <MX_TIM10_Init+0x94>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 8000868:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <MX_TIM10_Init+0x94>)
 800086a:	f242 720f 	movw	r2, #9999	; 0x270f
 800086e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000870:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <MX_TIM10_Init+0x94>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000876:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <MX_TIM10_Init+0x94>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800087c:	4814      	ldr	r0, [pc, #80]	; (80008d0 <MX_TIM10_Init+0x94>)
 800087e:	f001 fc0f 	bl	80020a0 <HAL_TIM_Base_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 8000888:	f000 f948 	bl	8000b1c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 800088c:	4810      	ldr	r0, [pc, #64]	; (80008d0 <MX_TIM10_Init+0x94>)
 800088e:	f001 fcb9 	bl	8002204 <HAL_TIM_OC_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 8000898:	f000 f940 	bl	8000b1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800089c:	2300      	movs	r3, #0
 800089e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	2200      	movs	r2, #0
 80008b0:	4619      	mov	r1, r3
 80008b2:	4807      	ldr	r0, [pc, #28]	; (80008d0 <MX_TIM10_Init+0x94>)
 80008b4:	f001 fdf0 	bl	8002498 <HAL_TIM_OC_ConfigChannel>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 80008be:	f000 f92d 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80008c2:	4803      	ldr	r0, [pc, #12]	; (80008d0 <MX_TIM10_Init+0x94>)
 80008c4:	f000 f9bc 	bl	8000c40 <HAL_TIM_MspPostInit>

}
 80008c8:	bf00      	nop
 80008ca:	3720      	adds	r7, #32
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	200000c0 	.word	0x200000c0
 80008d4:	40014400 	.word	0x40014400

080008d8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b088      	sub	sp, #32
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
 80008ec:	615a      	str	r2, [r3, #20]
 80008ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80008f0:	4b1e      	ldr	r3, [pc, #120]	; (800096c <MX_TIM11_Init+0x94>)
 80008f2:	4a1f      	ldr	r2, [pc, #124]	; (8000970 <MX_TIM11_Init+0x98>)
 80008f4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 999;
 80008f6:	4b1d      	ldr	r3, [pc, #116]	; (800096c <MX_TIM11_Init+0x94>)
 80008f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008fc:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fe:	4b1b      	ldr	r3, [pc, #108]	; (800096c <MX_TIM11_Init+0x94>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 4905;
 8000904:	4b19      	ldr	r3, [pc, #100]	; (800096c <MX_TIM11_Init+0x94>)
 8000906:	f241 3229 	movw	r2, #4905	; 0x1329
 800090a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800090c:	4b17      	ldr	r3, [pc, #92]	; (800096c <MX_TIM11_Init+0x94>)
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000912:	4b16      	ldr	r3, [pc, #88]	; (800096c <MX_TIM11_Init+0x94>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000918:	4814      	ldr	r0, [pc, #80]	; (800096c <MX_TIM11_Init+0x94>)
 800091a:	f001 fbc1 	bl	80020a0 <HAL_TIM_Base_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM11_Init+0x50>
  {
    Error_Handler();
 8000924:	f000 f8fa 	bl	8000b1c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 8000928:	4810      	ldr	r0, [pc, #64]	; (800096c <MX_TIM11_Init+0x94>)
 800092a:	f001 fc6b 	bl	8002204 <HAL_TIM_OC_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM11_Init+0x60>
  {
    Error_Handler();
 8000934:	f000 f8f2 	bl	8000b1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000938:	2300      	movs	r3, #0
 800093a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000940:	2300      	movs	r3, #0
 8000942:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	2200      	movs	r2, #0
 800094c:	4619      	mov	r1, r3
 800094e:	4807      	ldr	r0, [pc, #28]	; (800096c <MX_TIM11_Init+0x94>)
 8000950:	f001 fda2 	bl	8002498 <HAL_TIM_OC_ConfigChannel>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_TIM11_Init+0x86>
  {
    Error_Handler();
 800095a:	f000 f8df 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 800095e:	4803      	ldr	r0, [pc, #12]	; (800096c <MX_TIM11_Init+0x94>)
 8000960:	f000 f96e 	bl	8000c40 <HAL_TIM_MspPostInit>

}
 8000964:	bf00      	nop
 8000966:	3720      	adds	r7, #32
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000108 	.word	0x20000108
 8000970:	40014800 	.word	0x40014800

08000974 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 800097a:	4a12      	ldr	r2, [pc, #72]	; (80009c4 <MX_USART2_UART_Init+0x50>)
 800097c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 17701;
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 8000980:	f244 5225 	movw	r2, #17701	; 0x4525
 8000984:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 80009ac:	f002 f9f4 	bl	8002d98 <HAL_UART_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009b6:	f000 f8b1 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000150 	.word	0x20000150
 80009c4:	40004400 	.word	0x40004400

080009c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	4b4a      	ldr	r3, [pc, #296]	; (8000b0c <MX_GPIO_Init+0x144>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a49      	ldr	r2, [pc, #292]	; (8000b0c <MX_GPIO_Init+0x144>)
 80009e8:	f043 0304 	orr.w	r3, r3, #4
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b47      	ldr	r3, [pc, #284]	; (8000b0c <MX_GPIO_Init+0x144>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0304 	and.w	r3, r3, #4
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	4b43      	ldr	r3, [pc, #268]	; (8000b0c <MX_GPIO_Init+0x144>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a42      	ldr	r2, [pc, #264]	; (8000b0c <MX_GPIO_Init+0x144>)
 8000a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b40      	ldr	r3, [pc, #256]	; (8000b0c <MX_GPIO_Init+0x144>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	4b3c      	ldr	r3, [pc, #240]	; (8000b0c <MX_GPIO_Init+0x144>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a3b      	ldr	r2, [pc, #236]	; (8000b0c <MX_GPIO_Init+0x144>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b39      	ldr	r3, [pc, #228]	; (8000b0c <MX_GPIO_Init+0x144>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	4b35      	ldr	r3, [pc, #212]	; (8000b0c <MX_GPIO_Init+0x144>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a34      	ldr	r2, [pc, #208]	; (8000b0c <MX_GPIO_Init+0x144>)
 8000a3c:	f043 0302 	orr.w	r3, r3, #2
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b32      	ldr	r3, [pc, #200]	; (8000b0c <MX_GPIO_Init+0x144>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0302 	and.w	r3, r3, #2
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2120      	movs	r1, #32
 8000a52:	482f      	ldr	r0, [pc, #188]	; (8000b10 <MX_GPIO_Init+0x148>)
 8000a54:	f000 fe34 	bl	80016c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a5e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4829      	ldr	r0, [pc, #164]	; (8000b14 <MX_GPIO_Init+0x14c>)
 8000a70:	f000 fca2 	bl	80013b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a74:	2301      	movs	r3, #1
 8000a76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2300      	movs	r3, #0
 8000a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000a84:	2302      	movs	r3, #2
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4820      	ldr	r0, [pc, #128]	; (8000b10 <MX_GPIO_Init+0x148>)
 8000a90:	f000 fc92 	bl	80013b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a94:	2320      	movs	r3, #32
 8000a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4819      	ldr	r0, [pc, #100]	; (8000b10 <MX_GPIO_Init+0x148>)
 8000aac:	f000 fc84 	bl	80013b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ab0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ab4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	4619      	mov	r1, r3
 8000acc:	4812      	ldr	r0, [pc, #72]	; (8000b18 <MX_GPIO_Init+0x150>)
 8000ace:	f000 fc73 	bl	80013b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ad2:	2340      	movs	r3, #64	; 0x40
 8000ad4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	4619      	mov	r1, r3
 8000aec:	480a      	ldr	r0, [pc, #40]	; (8000b18 <MX_GPIO_Init+0x150>)
 8000aee:	f000 fc63 	bl	80013b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2100      	movs	r1, #0
 8000af6:	2028      	movs	r0, #40	; 0x28
 8000af8:	f000 fb95 	bl	8001226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000afc:	2028      	movs	r0, #40	; 0x28
 8000afe:	f000 fbae 	bl	800125e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b02:	bf00      	nop
 8000b04:	3728      	adds	r7, #40	; 0x28
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40020000 	.word	0x40020000
 8000b14:	40020800 	.word	0x40020800
 8000b18:	40020400 	.word	0x40020400

08000b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b20:	b672      	cpsid	i
}
 8000b22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <Error_Handler+0x8>
	...

08000b28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <HAL_MspInit+0x4c>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	4a0f      	ldr	r2, [pc, #60]	; (8000b74 <HAL_MspInit+0x4c>)
 8000b38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b3e:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <HAL_MspInit+0x4c>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	603b      	str	r3, [r7, #0]
 8000b4e:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <HAL_MspInit+0x4c>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	4a08      	ldr	r2, [pc, #32]	; (8000b74 <HAL_MspInit+0x4c>)
 8000b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b58:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_MspInit+0x4c>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b62:	603b      	str	r3, [r7, #0]
 8000b64:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b66:	2007      	movs	r0, #7
 8000b68:	f000 fb52 	bl	8001210 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40023800 	.word	0x40023800

08000b78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a2a      	ldr	r2, [pc, #168]	; (8000c30 <HAL_TIM_Base_MspInit+0xb8>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d116      	bne.n	8000bb8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
 8000b8e:	4b29      	ldr	r3, [pc, #164]	; (8000c34 <HAL_TIM_Base_MspInit+0xbc>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	4a28      	ldr	r2, [pc, #160]	; (8000c34 <HAL_TIM_Base_MspInit+0xbc>)
 8000b94:	f043 0302 	orr.w	r3, r3, #2
 8000b98:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9a:	4b26      	ldr	r3, [pc, #152]	; (8000c34 <HAL_TIM_Base_MspInit+0xbc>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	f003 0302 	and.w	r3, r3, #2
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2100      	movs	r1, #0
 8000baa:	201d      	movs	r0, #29
 8000bac:	f000 fb3b 	bl	8001226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000bb0:	201d      	movs	r0, #29
 8000bb2:	f000 fb54 	bl	800125e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000bb6:	e036      	b.n	8000c26 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a1e      	ldr	r2, [pc, #120]	; (8000c38 <HAL_TIM_Base_MspInit+0xc0>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d116      	bne.n	8000bf0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	4b1b      	ldr	r3, [pc, #108]	; (8000c34 <HAL_TIM_Base_MspInit+0xbc>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bca:	4a1a      	ldr	r2, [pc, #104]	; (8000c34 <HAL_TIM_Base_MspInit+0xbc>)
 8000bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bd2:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <HAL_TIM_Base_MspInit+0xbc>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2100      	movs	r1, #0
 8000be2:	2019      	movs	r0, #25
 8000be4:	f000 fb1f 	bl	8001226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000be8:	2019      	movs	r0, #25
 8000bea:	f000 fb38 	bl	800125e <HAL_NVIC_EnableIRQ>
}
 8000bee:	e01a      	b.n	8000c26 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a11      	ldr	r2, [pc, #68]	; (8000c3c <HAL_TIM_Base_MspInit+0xc4>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d115      	bne.n	8000c26 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <HAL_TIM_Base_MspInit+0xbc>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c02:	4a0c      	ldr	r2, [pc, #48]	; (8000c34 <HAL_TIM_Base_MspInit+0xbc>)
 8000c04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c08:	6453      	str	r3, [r2, #68]	; 0x44
 8000c0a:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <HAL_TIM_Base_MspInit+0xbc>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2100      	movs	r1, #0
 8000c1a:	201a      	movs	r0, #26
 8000c1c:	f000 fb03 	bl	8001226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000c20:	201a      	movs	r0, #26
 8000c22:	f000 fb1c 	bl	800125e <HAL_NVIC_EnableIRQ>
}
 8000c26:	bf00      	nop
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40000400 	.word	0x40000400
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40014400 	.word	0x40014400
 8000c3c:	40014800 	.word	0x40014800

08000c40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	; 0x28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a37      	ldr	r2, [pc, #220]	; (8000d3c <HAL_TIM_MspPostInit+0xfc>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d11e      	bne.n	8000ca0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	4b36      	ldr	r3, [pc, #216]	; (8000d40 <HAL_TIM_MspPostInit+0x100>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a35      	ldr	r2, [pc, #212]	; (8000d40 <HAL_TIM_MspPostInit+0x100>)
 8000c6c:	f043 0304 	orr.w	r3, r3, #4
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b33      	ldr	r3, [pc, #204]	; (8000d40 <HAL_TIM_MspPostInit+0x100>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0304 	and.w	r3, r3, #4
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c7e:	2380      	movs	r3, #128	; 0x80
 8000c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	482a      	ldr	r0, [pc, #168]	; (8000d44 <HAL_TIM_MspPostInit+0x104>)
 8000c9a:	f000 fb8d 	bl	80013b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8000c9e:	e048      	b.n	8000d32 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM10)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a28      	ldr	r2, [pc, #160]	; (8000d48 <HAL_TIM_MspPostInit+0x108>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d11f      	bne.n	8000cea <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	4b24      	ldr	r3, [pc, #144]	; (8000d40 <HAL_TIM_MspPostInit+0x100>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a23      	ldr	r2, [pc, #140]	; (8000d40 <HAL_TIM_MspPostInit+0x100>)
 8000cb4:	f043 0302 	orr.w	r3, r3, #2
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b21      	ldr	r3, [pc, #132]	; (8000d40 <HAL_TIM_MspPostInit+0x100>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000cc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	481a      	ldr	r0, [pc, #104]	; (8000d4c <HAL_TIM_MspPostInit+0x10c>)
 8000ce4:	f000 fb68 	bl	80013b8 <HAL_GPIO_Init>
}
 8000ce8:	e023      	b.n	8000d32 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM11)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a18      	ldr	r2, [pc, #96]	; (8000d50 <HAL_TIM_MspPostInit+0x110>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d11e      	bne.n	8000d32 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <HAL_TIM_MspPostInit+0x100>)
 8000cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfc:	4a10      	ldr	r2, [pc, #64]	; (8000d40 <HAL_TIM_MspPostInit+0x100>)
 8000cfe:	f043 0302 	orr.w	r3, r3, #2
 8000d02:	6313      	str	r3, [r2, #48]	; 0x30
 8000d04:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <HAL_TIM_MspPostInit+0x100>)
 8000d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d08:	f003 0302 	and.w	r3, r3, #2
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8000d22:	2303      	movs	r3, #3
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4807      	ldr	r0, [pc, #28]	; (8000d4c <HAL_TIM_MspPostInit+0x10c>)
 8000d2e:	f000 fb43 	bl	80013b8 <HAL_GPIO_Init>
}
 8000d32:	bf00      	nop
 8000d34:	3728      	adds	r7, #40	; 0x28
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40000400 	.word	0x40000400
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40020800 	.word	0x40020800
 8000d48:	40014400 	.word	0x40014400
 8000d4c:	40020400 	.word	0x40020400
 8000d50:	40014800 	.word	0x40014800

08000d54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a1d      	ldr	r2, [pc, #116]	; (8000de8 <HAL_UART_MspInit+0x94>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d133      	bne.n	8000dde <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	4b1c      	ldr	r3, [pc, #112]	; (8000dec <HAL_UART_MspInit+0x98>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	4a1b      	ldr	r2, [pc, #108]	; (8000dec <HAL_UART_MspInit+0x98>)
 8000d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d84:	6413      	str	r3, [r2, #64]	; 0x40
 8000d86:	4b19      	ldr	r3, [pc, #100]	; (8000dec <HAL_UART_MspInit+0x98>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	4b15      	ldr	r3, [pc, #84]	; (8000dec <HAL_UART_MspInit+0x98>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a14      	ldr	r2, [pc, #80]	; (8000dec <HAL_UART_MspInit+0x98>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b12      	ldr	r3, [pc, #72]	; (8000dec <HAL_UART_MspInit+0x98>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dae:	230c      	movs	r3, #12
 8000db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dbe:	2307      	movs	r3, #7
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4809      	ldr	r0, [pc, #36]	; (8000df0 <HAL_UART_MspInit+0x9c>)
 8000dca:	f000 faf5 	bl	80013b8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2026      	movs	r0, #38	; 0x26
 8000dd4:	f000 fa27 	bl	8001226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000dd8:	2026      	movs	r0, #38	; 0x26
 8000dda:	f000 fa40 	bl	800125e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dde:	bf00      	nop
 8000de0:	3728      	adds	r7, #40	; 0x28
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40004400 	.word	0x40004400
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40020000 	.word	0x40020000

08000df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000df8:	e7fe      	b.n	8000df8 <NMI_Handler+0x4>

08000dfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfe:	e7fe      	b.n	8000dfe <HardFault_Handler+0x4>

08000e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <MemManage_Handler+0x4>

08000e06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0a:	e7fe      	b.n	8000e0a <BusFault_Handler+0x4>

08000e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <UsageFault_Handler+0x4>

08000e12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e40:	f000 f8f6 	bl	8001030 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000e4c:	4802      	ldr	r0, [pc, #8]	; (8000e58 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e4e:	f001 fa32 	bl	80022b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	200000c0 	.word	0x200000c0

08000e5c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000e60:	4802      	ldr	r0, [pc, #8]	; (8000e6c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000e62:	f001 fa28 	bl	80022b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000108 	.word	0x20000108

08000e70 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e74:	4802      	ldr	r0, [pc, #8]	; (8000e80 <TIM3_IRQHandler+0x10>)
 8000e76:	f001 fa1e 	bl	80022b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000078 	.word	0x20000078

08000e84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e88:	4802      	ldr	r0, [pc, #8]	; (8000e94 <USART2_IRQHandler+0x10>)
 8000e8a:	f002 f861 	bl	8002f50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000150 	.word	0x20000150

08000e98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000e9c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ea0:	f000 fc42 	bl	8001728 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eb0:	4a14      	ldr	r2, [pc, #80]	; (8000f04 <_sbrk+0x5c>)
 8000eb2:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <_sbrk+0x60>)
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ebc:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <_sbrk+0x64>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d102      	bne.n	8000eca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ec4:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <_sbrk+0x64>)
 8000ec6:	4a12      	ldr	r2, [pc, #72]	; (8000f10 <_sbrk+0x68>)
 8000ec8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <_sbrk+0x64>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d207      	bcs.n	8000ee8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ed8:	f002 ff88 	bl	8003dec <__errno>
 8000edc:	4603      	mov	r3, r0
 8000ede:	220c      	movs	r2, #12
 8000ee0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee6:	e009      	b.n	8000efc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ee8:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <_sbrk+0x64>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eee:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <_sbrk+0x64>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	4a05      	ldr	r2, [pc, #20]	; (8000f0c <_sbrk+0x64>)
 8000ef8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000efa:	68fb      	ldr	r3, [r7, #12]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3718      	adds	r7, #24
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20018000 	.word	0x20018000
 8000f08:	00000400 	.word	0x00000400
 8000f0c:	200001a0 	.word	0x200001a0
 8000f10:	200002f0 	.word	0x200002f0

08000f14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <SystemInit+0x20>)
 8000f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f1e:	4a05      	ldr	r2, [pc, #20]	; (8000f34 <SystemInit+0x20>)
 8000f20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f3c:	f7ff ffea 	bl	8000f14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f40:	480c      	ldr	r0, [pc, #48]	; (8000f74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f42:	490d      	ldr	r1, [pc, #52]	; (8000f78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f44:	4a0d      	ldr	r2, [pc, #52]	; (8000f7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f48:	e002      	b.n	8000f50 <LoopCopyDataInit>

08000f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4e:	3304      	adds	r3, #4

08000f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f54:	d3f9      	bcc.n	8000f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f56:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f58:	4c0a      	ldr	r4, [pc, #40]	; (8000f84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f5c:	e001      	b.n	8000f62 <LoopFillZerobss>

08000f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f60:	3204      	adds	r2, #4

08000f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f64:	d3fb      	bcc.n	8000f5e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000f66:	f002 ff47 	bl	8003df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6a:	f7ff fb65 	bl	8000638 <main>
  bx  lr    
 8000f6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f70:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f78:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f7c:	08004764 	.word	0x08004764
  ldr r2, =_sbss
 8000f80:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f84:	200002f0 	.word	0x200002f0

08000f88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f88:	e7fe      	b.n	8000f88 <ADC_IRQHandler>
	...

08000f8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f90:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <HAL_Init+0x40>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a0d      	ldr	r2, [pc, #52]	; (8000fcc <HAL_Init+0x40>)
 8000f96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <HAL_Init+0x40>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <HAL_Init+0x40>)
 8000fa2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fa6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <HAL_Init+0x40>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a07      	ldr	r2, [pc, #28]	; (8000fcc <HAL_Init+0x40>)
 8000fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb4:	2003      	movs	r0, #3
 8000fb6:	f000 f92b 	bl	8001210 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f000 f808 	bl	8000fd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc0:	f7ff fdb2 	bl	8000b28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40023c00 	.word	0x40023c00

08000fd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_InitTick+0x54>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <HAL_InitTick+0x58>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 f943 	bl	800127a <HAL_SYSTICK_Config>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e00e      	b.n	800101c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b0f      	cmp	r3, #15
 8001002:	d80a      	bhi.n	800101a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001004:	2200      	movs	r2, #0
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	f04f 30ff 	mov.w	r0, #4294967295
 800100c:	f000 f90b 	bl	8001226 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001010:	4a06      	ldr	r2, [pc, #24]	; (800102c <HAL_InitTick+0x5c>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001016:	2300      	movs	r3, #0
 8001018:	e000      	b.n	800101c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
}
 800101c:	4618      	mov	r0, r3
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000000 	.word	0x20000000
 8001028:	20000008 	.word	0x20000008
 800102c:	20000004 	.word	0x20000004

08001030 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_IncTick+0x20>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_IncTick+0x24>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4413      	add	r3, r2
 8001040:	4a04      	ldr	r2, [pc, #16]	; (8001054 <HAL_IncTick+0x24>)
 8001042:	6013      	str	r3, [r2, #0]
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	20000008 	.word	0x20000008
 8001054:	200001a4 	.word	0x200001a4

08001058 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return uwTick;
 800105c:	4b03      	ldr	r3, [pc, #12]	; (800106c <HAL_GetTick+0x14>)
 800105e:	681b      	ldr	r3, [r3, #0]
}
 8001060:	4618      	mov	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	200001a4 	.word	0x200001a4

08001070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001080:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001086:	68ba      	ldr	r2, [r7, #8]
 8001088:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800108c:	4013      	ands	r3, r2
 800108e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001098:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800109c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010a2:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <__NVIC_SetPriorityGrouping+0x44>)
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	60d3      	str	r3, [r2, #12]
}
 80010a8:	bf00      	nop
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010bc:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <__NVIC_GetPriorityGrouping+0x18>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	0a1b      	lsrs	r3, r3, #8
 80010c2:	f003 0307 	and.w	r3, r3, #7
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	db0b      	blt.n	80010fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	f003 021f 	and.w	r2, r3, #31
 80010ec:	4907      	ldr	r1, [pc, #28]	; (800110c <__NVIC_EnableIRQ+0x38>)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	095b      	lsrs	r3, r3, #5
 80010f4:	2001      	movs	r0, #1
 80010f6:	fa00 f202 	lsl.w	r2, r0, r2
 80010fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000e100 	.word	0xe000e100

08001110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	6039      	str	r1, [r7, #0]
 800111a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001120:	2b00      	cmp	r3, #0
 8001122:	db0a      	blt.n	800113a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	b2da      	uxtb	r2, r3
 8001128:	490c      	ldr	r1, [pc, #48]	; (800115c <__NVIC_SetPriority+0x4c>)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	0112      	lsls	r2, r2, #4
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	440b      	add	r3, r1
 8001134:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001138:	e00a      	b.n	8001150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4908      	ldr	r1, [pc, #32]	; (8001160 <__NVIC_SetPriority+0x50>)
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	f003 030f 	and.w	r3, r3, #15
 8001146:	3b04      	subs	r3, #4
 8001148:	0112      	lsls	r2, r2, #4
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	440b      	add	r3, r1
 800114e:	761a      	strb	r2, [r3, #24]
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000e100 	.word	0xe000e100
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001164:	b480      	push	{r7}
 8001166:	b089      	sub	sp, #36	; 0x24
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	f1c3 0307 	rsb	r3, r3, #7
 800117e:	2b04      	cmp	r3, #4
 8001180:	bf28      	it	cs
 8001182:	2304      	movcs	r3, #4
 8001184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3304      	adds	r3, #4
 800118a:	2b06      	cmp	r3, #6
 800118c:	d902      	bls.n	8001194 <NVIC_EncodePriority+0x30>
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3b03      	subs	r3, #3
 8001192:	e000      	b.n	8001196 <NVIC_EncodePriority+0x32>
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	f04f 32ff 	mov.w	r2, #4294967295
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43da      	mvns	r2, r3
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	401a      	ands	r2, r3
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ac:	f04f 31ff 	mov.w	r1, #4294967295
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	fa01 f303 	lsl.w	r3, r1, r3
 80011b6:	43d9      	mvns	r1, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	4313      	orrs	r3, r2
         );
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3724      	adds	r7, #36	; 0x24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
	...

080011cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3b01      	subs	r3, #1
 80011d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011dc:	d301      	bcc.n	80011e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011de:	2301      	movs	r3, #1
 80011e0:	e00f      	b.n	8001202 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011e2:	4a0a      	ldr	r2, [pc, #40]	; (800120c <SysTick_Config+0x40>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ea:	210f      	movs	r1, #15
 80011ec:	f04f 30ff 	mov.w	r0, #4294967295
 80011f0:	f7ff ff8e 	bl	8001110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f4:	4b05      	ldr	r3, [pc, #20]	; (800120c <SysTick_Config+0x40>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011fa:	4b04      	ldr	r3, [pc, #16]	; (800120c <SysTick_Config+0x40>)
 80011fc:	2207      	movs	r2, #7
 80011fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	e000e010 	.word	0xe000e010

08001210 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff ff29 	bl	8001070 <__NVIC_SetPriorityGrouping>
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001226:	b580      	push	{r7, lr}
 8001228:	b086      	sub	sp, #24
 800122a:	af00      	add	r7, sp, #0
 800122c:	4603      	mov	r3, r0
 800122e:	60b9      	str	r1, [r7, #8]
 8001230:	607a      	str	r2, [r7, #4]
 8001232:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001238:	f7ff ff3e 	bl	80010b8 <__NVIC_GetPriorityGrouping>
 800123c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	68b9      	ldr	r1, [r7, #8]
 8001242:	6978      	ldr	r0, [r7, #20]
 8001244:	f7ff ff8e 	bl	8001164 <NVIC_EncodePriority>
 8001248:	4602      	mov	r2, r0
 800124a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124e:	4611      	mov	r1, r2
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff5d 	bl	8001110 <__NVIC_SetPriority>
}
 8001256:	bf00      	nop
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	4603      	mov	r3, r0
 8001266:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff31 	bl	80010d4 <__NVIC_EnableIRQ>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff ffa2 	bl	80011cc <SysTick_Config>
 8001288:	4603      	mov	r3, r0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b084      	sub	sp, #16
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012a0:	f7ff feda 	bl	8001058 <HAL_GetTick>
 80012a4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d008      	beq.n	80012c4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2280      	movs	r2, #128	; 0x80
 80012b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e052      	b.n	800136a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f022 0216 	bic.w	r2, r2, #22
 80012d2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	695a      	ldr	r2, [r3, #20]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012e2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d103      	bne.n	80012f4 <HAL_DMA_Abort+0x62>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d007      	beq.n	8001304 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f022 0208 	bic.w	r2, r2, #8
 8001302:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f022 0201 	bic.w	r2, r2, #1
 8001312:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001314:	e013      	b.n	800133e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001316:	f7ff fe9f 	bl	8001058 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b05      	cmp	r3, #5
 8001322:	d90c      	bls.n	800133e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2220      	movs	r2, #32
 8001328:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2203      	movs	r2, #3
 800132e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e015      	b.n	800136a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1e4      	bne.n	8001316 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001350:	223f      	movs	r2, #63	; 0x3f
 8001352:	409a      	lsls	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2201      	movs	r2, #1
 800135c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d004      	beq.n	8001390 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2280      	movs	r2, #128	; 0x80
 800138a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e00c      	b.n	80013aa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2205      	movs	r2, #5
 8001394:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 0201 	bic.w	r2, r2, #1
 80013a6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
	...

080013b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b089      	sub	sp, #36	; 0x24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
 80013d2:	e159      	b.n	8001688 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013d4:	2201      	movs	r2, #1
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	4013      	ands	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	f040 8148 	bne.w	8001682 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f003 0303 	and.w	r3, r3, #3
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d005      	beq.n	800140a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001406:	2b02      	cmp	r3, #2
 8001408:	d130      	bne.n	800146c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	2203      	movs	r2, #3
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43db      	mvns	r3, r3
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	4013      	ands	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	68da      	ldr	r2, [r3, #12]
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4313      	orrs	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001440:	2201      	movs	r2, #1
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	091b      	lsrs	r3, r3, #4
 8001456:	f003 0201 	and.w	r2, r3, #1
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 0303 	and.w	r3, r3, #3
 8001474:	2b03      	cmp	r3, #3
 8001476:	d017      	beq.n	80014a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	2203      	movs	r2, #3
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 0303 	and.w	r3, r3, #3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d123      	bne.n	80014fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	08da      	lsrs	r2, r3, #3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3208      	adds	r2, #8
 80014bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	f003 0307 	and.w	r3, r3, #7
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	220f      	movs	r2, #15
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	691a      	ldr	r2, [r3, #16]
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	08da      	lsrs	r2, r3, #3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	3208      	adds	r2, #8
 80014f6:	69b9      	ldr	r1, [r7, #24]
 80014f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	2203      	movs	r2, #3
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 0203 	and.w	r2, r3, #3
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001538:	2b00      	cmp	r3, #0
 800153a:	f000 80a2 	beq.w	8001682 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	4b57      	ldr	r3, [pc, #348]	; (80016a0 <HAL_GPIO_Init+0x2e8>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	4a56      	ldr	r2, [pc, #344]	; (80016a0 <HAL_GPIO_Init+0x2e8>)
 8001548:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800154c:	6453      	str	r3, [r2, #68]	; 0x44
 800154e:	4b54      	ldr	r3, [pc, #336]	; (80016a0 <HAL_GPIO_Init+0x2e8>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800155a:	4a52      	ldr	r2, [pc, #328]	; (80016a4 <HAL_GPIO_Init+0x2ec>)
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	089b      	lsrs	r3, r3, #2
 8001560:	3302      	adds	r3, #2
 8001562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001566:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	220f      	movs	r2, #15
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4013      	ands	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a49      	ldr	r2, [pc, #292]	; (80016a8 <HAL_GPIO_Init+0x2f0>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d019      	beq.n	80015ba <HAL_GPIO_Init+0x202>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a48      	ldr	r2, [pc, #288]	; (80016ac <HAL_GPIO_Init+0x2f4>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d013      	beq.n	80015b6 <HAL_GPIO_Init+0x1fe>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a47      	ldr	r2, [pc, #284]	; (80016b0 <HAL_GPIO_Init+0x2f8>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d00d      	beq.n	80015b2 <HAL_GPIO_Init+0x1fa>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a46      	ldr	r2, [pc, #280]	; (80016b4 <HAL_GPIO_Init+0x2fc>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d007      	beq.n	80015ae <HAL_GPIO_Init+0x1f6>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a45      	ldr	r2, [pc, #276]	; (80016b8 <HAL_GPIO_Init+0x300>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d101      	bne.n	80015aa <HAL_GPIO_Init+0x1f2>
 80015a6:	2304      	movs	r3, #4
 80015a8:	e008      	b.n	80015bc <HAL_GPIO_Init+0x204>
 80015aa:	2307      	movs	r3, #7
 80015ac:	e006      	b.n	80015bc <HAL_GPIO_Init+0x204>
 80015ae:	2303      	movs	r3, #3
 80015b0:	e004      	b.n	80015bc <HAL_GPIO_Init+0x204>
 80015b2:	2302      	movs	r3, #2
 80015b4:	e002      	b.n	80015bc <HAL_GPIO_Init+0x204>
 80015b6:	2301      	movs	r3, #1
 80015b8:	e000      	b.n	80015bc <HAL_GPIO_Init+0x204>
 80015ba:	2300      	movs	r3, #0
 80015bc:	69fa      	ldr	r2, [r7, #28]
 80015be:	f002 0203 	and.w	r2, r2, #3
 80015c2:	0092      	lsls	r2, r2, #2
 80015c4:	4093      	lsls	r3, r2
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015cc:	4935      	ldr	r1, [pc, #212]	; (80016a4 <HAL_GPIO_Init+0x2ec>)
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	089b      	lsrs	r3, r3, #2
 80015d2:	3302      	adds	r3, #2
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015da:	4b38      	ldr	r3, [pc, #224]	; (80016bc <HAL_GPIO_Init+0x304>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	43db      	mvns	r3, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4013      	ands	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015fe:	4a2f      	ldr	r2, [pc, #188]	; (80016bc <HAL_GPIO_Init+0x304>)
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001604:	4b2d      	ldr	r3, [pc, #180]	; (80016bc <HAL_GPIO_Init+0x304>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	43db      	mvns	r3, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d003      	beq.n	8001628 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	4313      	orrs	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001628:	4a24      	ldr	r2, [pc, #144]	; (80016bc <HAL_GPIO_Init+0x304>)
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800162e:	4b23      	ldr	r3, [pc, #140]	; (80016bc <HAL_GPIO_Init+0x304>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	43db      	mvns	r3, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4013      	ands	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	4313      	orrs	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001652:	4a1a      	ldr	r2, [pc, #104]	; (80016bc <HAL_GPIO_Init+0x304>)
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001658:	4b18      	ldr	r3, [pc, #96]	; (80016bc <HAL_GPIO_Init+0x304>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	43db      	mvns	r3, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	4313      	orrs	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800167c:	4a0f      	ldr	r2, [pc, #60]	; (80016bc <HAL_GPIO_Init+0x304>)
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3301      	adds	r3, #1
 8001686:	61fb      	str	r3, [r7, #28]
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	2b0f      	cmp	r3, #15
 800168c:	f67f aea2 	bls.w	80013d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001690:	bf00      	nop
 8001692:	bf00      	nop
 8001694:	3724      	adds	r7, #36	; 0x24
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40013800 	.word	0x40013800
 80016a8:	40020000 	.word	0x40020000
 80016ac:	40020400 	.word	0x40020400
 80016b0:	40020800 	.word	0x40020800
 80016b4:	40020c00 	.word	0x40020c00
 80016b8:	40021000 	.word	0x40021000
 80016bc:	40013c00 	.word	0x40013c00

080016c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	807b      	strh	r3, [r7, #2]
 80016cc:	4613      	mov	r3, r2
 80016ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016d0:	787b      	ldrb	r3, [r7, #1]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016d6:	887a      	ldrh	r2, [r7, #2]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016dc:	e003      	b.n	80016e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016de:	887b      	ldrh	r3, [r7, #2]
 80016e0:	041a      	lsls	r2, r3, #16
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	619a      	str	r2, [r3, #24]
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016f2:	b480      	push	{r7}
 80016f4:	b085      	sub	sp, #20
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
 80016fa:	460b      	mov	r3, r1
 80016fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001704:	887a      	ldrh	r2, [r7, #2]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	4013      	ands	r3, r2
 800170a:	041a      	lsls	r2, r3, #16
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	43d9      	mvns	r1, r3
 8001710:	887b      	ldrh	r3, [r7, #2]
 8001712:	400b      	ands	r3, r1
 8001714:	431a      	orrs	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	619a      	str	r2, [r3, #24]
}
 800171a:	bf00      	nop
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001732:	4b08      	ldr	r3, [pc, #32]	; (8001754 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001734:	695a      	ldr	r2, [r3, #20]
 8001736:	88fb      	ldrh	r3, [r7, #6]
 8001738:	4013      	ands	r3, r2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d006      	beq.n	800174c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800173e:	4a05      	ldr	r2, [pc, #20]	; (8001754 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001740:	88fb      	ldrh	r3, [r7, #6]
 8001742:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001744:	88fb      	ldrh	r3, [r7, #6]
 8001746:	4618      	mov	r0, r3
 8001748:	f000 f806 	bl	8001758 <HAL_GPIO_EXTI_Callback>
  }
}
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40013c00 	.word	0x40013c00

08001758 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
	...

08001770 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e267      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	d075      	beq.n	800187a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800178e:	4b88      	ldr	r3, [pc, #544]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 030c 	and.w	r3, r3, #12
 8001796:	2b04      	cmp	r3, #4
 8001798:	d00c      	beq.n	80017b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800179a:	4b85      	ldr	r3, [pc, #532]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017a2:	2b08      	cmp	r3, #8
 80017a4:	d112      	bne.n	80017cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017a6:	4b82      	ldr	r3, [pc, #520]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017b2:	d10b      	bne.n	80017cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b4:	4b7e      	ldr	r3, [pc, #504]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d05b      	beq.n	8001878 <HAL_RCC_OscConfig+0x108>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d157      	bne.n	8001878 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e242      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017d4:	d106      	bne.n	80017e4 <HAL_RCC_OscConfig+0x74>
 80017d6:	4b76      	ldr	r3, [pc, #472]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a75      	ldr	r2, [pc, #468]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 80017dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	e01d      	b.n	8001820 <HAL_RCC_OscConfig+0xb0>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017ec:	d10c      	bne.n	8001808 <HAL_RCC_OscConfig+0x98>
 80017ee:	4b70      	ldr	r3, [pc, #448]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a6f      	ldr	r2, [pc, #444]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 80017f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	4b6d      	ldr	r3, [pc, #436]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a6c      	ldr	r2, [pc, #432]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 8001800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	e00b      	b.n	8001820 <HAL_RCC_OscConfig+0xb0>
 8001808:	4b69      	ldr	r3, [pc, #420]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a68      	ldr	r2, [pc, #416]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 800180e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001812:	6013      	str	r3, [r2, #0]
 8001814:	4b66      	ldr	r3, [pc, #408]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a65      	ldr	r2, [pc, #404]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 800181a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800181e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d013      	beq.n	8001850 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001828:	f7ff fc16 	bl	8001058 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001830:	f7ff fc12 	bl	8001058 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b64      	cmp	r3, #100	; 0x64
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e207      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001842:	4b5b      	ldr	r3, [pc, #364]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d0f0      	beq.n	8001830 <HAL_RCC_OscConfig+0xc0>
 800184e:	e014      	b.n	800187a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001850:	f7ff fc02 	bl	8001058 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001858:	f7ff fbfe 	bl	8001058 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b64      	cmp	r3, #100	; 0x64
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e1f3      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800186a:	4b51      	ldr	r3, [pc, #324]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f0      	bne.n	8001858 <HAL_RCC_OscConfig+0xe8>
 8001876:	e000      	b.n	800187a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d063      	beq.n	800194e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001886:	4b4a      	ldr	r3, [pc, #296]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 030c 	and.w	r3, r3, #12
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00b      	beq.n	80018aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001892:	4b47      	ldr	r3, [pc, #284]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800189a:	2b08      	cmp	r3, #8
 800189c:	d11c      	bne.n	80018d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800189e:	4b44      	ldr	r3, [pc, #272]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d116      	bne.n	80018d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018aa:	4b41      	ldr	r3, [pc, #260]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d005      	beq.n	80018c2 <HAL_RCC_OscConfig+0x152>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d001      	beq.n	80018c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e1c7      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c2:	4b3b      	ldr	r3, [pc, #236]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	4937      	ldr	r1, [pc, #220]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018d6:	e03a      	b.n	800194e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d020      	beq.n	8001922 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018e0:	4b34      	ldr	r3, [pc, #208]	; (80019b4 <HAL_RCC_OscConfig+0x244>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e6:	f7ff fbb7 	bl	8001058 <HAL_GetTick>
 80018ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ec:	e008      	b.n	8001900 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018ee:	f7ff fbb3 	bl	8001058 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e1a8      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001900:	4b2b      	ldr	r3, [pc, #172]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d0f0      	beq.n	80018ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800190c:	4b28      	ldr	r3, [pc, #160]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	4925      	ldr	r1, [pc, #148]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 800191c:	4313      	orrs	r3, r2
 800191e:	600b      	str	r3, [r1, #0]
 8001920:	e015      	b.n	800194e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001922:	4b24      	ldr	r3, [pc, #144]	; (80019b4 <HAL_RCC_OscConfig+0x244>)
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001928:	f7ff fb96 	bl	8001058 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001930:	f7ff fb92 	bl	8001058 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e187      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001942:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f0      	bne.n	8001930 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0308 	and.w	r3, r3, #8
 8001956:	2b00      	cmp	r3, #0
 8001958:	d036      	beq.n	80019c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d016      	beq.n	8001990 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001962:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <HAL_RCC_OscConfig+0x248>)
 8001964:	2201      	movs	r2, #1
 8001966:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001968:	f7ff fb76 	bl	8001058 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001970:	f7ff fb72 	bl	8001058 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e167      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001982:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 8001984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d0f0      	beq.n	8001970 <HAL_RCC_OscConfig+0x200>
 800198e:	e01b      	b.n	80019c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001990:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <HAL_RCC_OscConfig+0x248>)
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001996:	f7ff fb5f 	bl	8001058 <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800199c:	e00e      	b.n	80019bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800199e:	f7ff fb5b 	bl	8001058 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d907      	bls.n	80019bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e150      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
 80019b0:	40023800 	.word	0x40023800
 80019b4:	42470000 	.word	0x42470000
 80019b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019bc:	4b88      	ldr	r3, [pc, #544]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 80019be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1ea      	bne.n	800199e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	f000 8097 	beq.w	8001b04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019d6:	2300      	movs	r3, #0
 80019d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019da:	4b81      	ldr	r3, [pc, #516]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10f      	bne.n	8001a06 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	4b7d      	ldr	r3, [pc, #500]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	4a7c      	ldr	r2, [pc, #496]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 80019f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f4:	6413      	str	r3, [r2, #64]	; 0x40
 80019f6:	4b7a      	ldr	r3, [pc, #488]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fe:	60bb      	str	r3, [r7, #8]
 8001a00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a02:	2301      	movs	r3, #1
 8001a04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a06:	4b77      	ldr	r3, [pc, #476]	; (8001be4 <HAL_RCC_OscConfig+0x474>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d118      	bne.n	8001a44 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a12:	4b74      	ldr	r3, [pc, #464]	; (8001be4 <HAL_RCC_OscConfig+0x474>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a73      	ldr	r2, [pc, #460]	; (8001be4 <HAL_RCC_OscConfig+0x474>)
 8001a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a1e:	f7ff fb1b 	bl	8001058 <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a26:	f7ff fb17 	bl	8001058 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e10c      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a38:	4b6a      	ldr	r3, [pc, #424]	; (8001be4 <HAL_RCC_OscConfig+0x474>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0f0      	beq.n	8001a26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d106      	bne.n	8001a5a <HAL_RCC_OscConfig+0x2ea>
 8001a4c:	4b64      	ldr	r3, [pc, #400]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a50:	4a63      	ldr	r2, [pc, #396]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001a52:	f043 0301 	orr.w	r3, r3, #1
 8001a56:	6713      	str	r3, [r2, #112]	; 0x70
 8001a58:	e01c      	b.n	8001a94 <HAL_RCC_OscConfig+0x324>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	2b05      	cmp	r3, #5
 8001a60:	d10c      	bne.n	8001a7c <HAL_RCC_OscConfig+0x30c>
 8001a62:	4b5f      	ldr	r3, [pc, #380]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a66:	4a5e      	ldr	r2, [pc, #376]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001a68:	f043 0304 	orr.w	r3, r3, #4
 8001a6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a6e:	4b5c      	ldr	r3, [pc, #368]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a72:	4a5b      	ldr	r2, [pc, #364]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6713      	str	r3, [r2, #112]	; 0x70
 8001a7a:	e00b      	b.n	8001a94 <HAL_RCC_OscConfig+0x324>
 8001a7c:	4b58      	ldr	r3, [pc, #352]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a80:	4a57      	ldr	r2, [pc, #348]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001a82:	f023 0301 	bic.w	r3, r3, #1
 8001a86:	6713      	str	r3, [r2, #112]	; 0x70
 8001a88:	4b55      	ldr	r3, [pc, #340]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a8c:	4a54      	ldr	r2, [pc, #336]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001a8e:	f023 0304 	bic.w	r3, r3, #4
 8001a92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d015      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9c:	f7ff fadc 	bl	8001058 <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aa2:	e00a      	b.n	8001aba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aa4:	f7ff fad8 	bl	8001058 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e0cb      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aba:	4b49      	ldr	r3, [pc, #292]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0ee      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x334>
 8001ac6:	e014      	b.n	8001af2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac8:	f7ff fac6 	bl	8001058 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ace:	e00a      	b.n	8001ae6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ad0:	f7ff fac2 	bl	8001058 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e0b5      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ae6:	4b3e      	ldr	r3, [pc, #248]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1ee      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001af2:	7dfb      	ldrb	r3, [r7, #23]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d105      	bne.n	8001b04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001af8:	4b39      	ldr	r3, [pc, #228]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	4a38      	ldr	r2, [pc, #224]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001afe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f000 80a1 	beq.w	8001c50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b0e:	4b34      	ldr	r3, [pc, #208]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 030c 	and.w	r3, r3, #12
 8001b16:	2b08      	cmp	r3, #8
 8001b18:	d05c      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d141      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b22:	4b31      	ldr	r3, [pc, #196]	; (8001be8 <HAL_RCC_OscConfig+0x478>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b28:	f7ff fa96 	bl	8001058 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b30:	f7ff fa92 	bl	8001058 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e087      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b42:	4b27      	ldr	r3, [pc, #156]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1f0      	bne.n	8001b30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69da      	ldr	r2, [r3, #28]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	431a      	orrs	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5c:	019b      	lsls	r3, r3, #6
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b64:	085b      	lsrs	r3, r3, #1
 8001b66:	3b01      	subs	r3, #1
 8001b68:	041b      	lsls	r3, r3, #16
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b70:	061b      	lsls	r3, r3, #24
 8001b72:	491b      	ldr	r1, [pc, #108]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b78:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <HAL_RCC_OscConfig+0x478>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7e:	f7ff fa6b 	bl	8001058 <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b84:	e008      	b.n	8001b98 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b86:	f7ff fa67 	bl	8001058 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e05c      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b98:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0f0      	beq.n	8001b86 <HAL_RCC_OscConfig+0x416>
 8001ba4:	e054      	b.n	8001c50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba6:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <HAL_RCC_OscConfig+0x478>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bac:	f7ff fa54 	bl	8001058 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb4:	f7ff fa50 	bl	8001058 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e045      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1f0      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x444>
 8001bd2:	e03d      	b.n	8001c50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d107      	bne.n	8001bec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e038      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40007000 	.word	0x40007000
 8001be8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bec:	4b1b      	ldr	r3, [pc, #108]	; (8001c5c <HAL_RCC_OscConfig+0x4ec>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d028      	beq.n	8001c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d121      	bne.n	8001c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d11a      	bne.n	8001c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d111      	bne.n	8001c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c32:	085b      	lsrs	r3, r3, #1
 8001c34:	3b01      	subs	r3, #1
 8001c36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d107      	bne.n	8001c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d001      	beq.n	8001c50 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e000      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40023800 	.word	0x40023800

08001c60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e0cc      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c74:	4b68      	ldr	r3, [pc, #416]	; (8001e18 <HAL_RCC_ClockConfig+0x1b8>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0307 	and.w	r3, r3, #7
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d90c      	bls.n	8001c9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c82:	4b65      	ldr	r3, [pc, #404]	; (8001e18 <HAL_RCC_ClockConfig+0x1b8>)
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8a:	4b63      	ldr	r3, [pc, #396]	; (8001e18 <HAL_RCC_ClockConfig+0x1b8>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d001      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e0b8      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d020      	beq.n	8001cea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d005      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cb4:	4b59      	ldr	r3, [pc, #356]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	4a58      	ldr	r2, [pc, #352]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001cba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001cbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0308 	and.w	r3, r3, #8
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d005      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ccc:	4b53      	ldr	r3, [pc, #332]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	4a52      	ldr	r2, [pc, #328]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001cd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd8:	4b50      	ldr	r3, [pc, #320]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	494d      	ldr	r1, [pc, #308]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d044      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d107      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfe:	4b47      	ldr	r3, [pc, #284]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d119      	bne.n	8001d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e07f      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d003      	beq.n	8001d1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d1a:	2b03      	cmp	r3, #3
 8001d1c:	d107      	bne.n	8001d2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d1e:	4b3f      	ldr	r3, [pc, #252]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d109      	bne.n	8001d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e06f      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d2e:	4b3b      	ldr	r3, [pc, #236]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e067      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d3e:	4b37      	ldr	r3, [pc, #220]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f023 0203 	bic.w	r2, r3, #3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	4934      	ldr	r1, [pc, #208]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d50:	f7ff f982 	bl	8001058 <HAL_GetTick>
 8001d54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d56:	e00a      	b.n	8001d6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d58:	f7ff f97e 	bl	8001058 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e04f      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d6e:	4b2b      	ldr	r3, [pc, #172]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 020c 	and.w	r2, r3, #12
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d1eb      	bne.n	8001d58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d80:	4b25      	ldr	r3, [pc, #148]	; (8001e18 <HAL_RCC_ClockConfig+0x1b8>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d20c      	bcs.n	8001da8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8e:	4b22      	ldr	r3, [pc, #136]	; (8001e18 <HAL_RCC_ClockConfig+0x1b8>)
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d96:	4b20      	ldr	r3, [pc, #128]	; (8001e18 <HAL_RCC_ClockConfig+0x1b8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d001      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e032      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d008      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001db4:	4b19      	ldr	r3, [pc, #100]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	4916      	ldr	r1, [pc, #88]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0308 	and.w	r3, r3, #8
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d009      	beq.n	8001de6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dd2:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	490e      	ldr	r1, [pc, #56]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001de6:	f000 f821 	bl	8001e2c <HAL_RCC_GetSysClockFreq>
 8001dea:	4602      	mov	r2, r0
 8001dec:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	091b      	lsrs	r3, r3, #4
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	490a      	ldr	r1, [pc, #40]	; (8001e20 <HAL_RCC_ClockConfig+0x1c0>)
 8001df8:	5ccb      	ldrb	r3, [r1, r3]
 8001dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8001dfe:	4a09      	ldr	r2, [pc, #36]	; (8001e24 <HAL_RCC_ClockConfig+0x1c4>)
 8001e00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e02:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <HAL_RCC_ClockConfig+0x1c8>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff f8e2 	bl	8000fd0 <HAL_InitTick>

  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40023c00 	.word	0x40023c00
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	08004708 	.word	0x08004708
 8001e24:	20000000 	.word	0x20000000
 8001e28:	20000004 	.word	0x20000004

08001e2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e30:	b094      	sub	sp, #80	; 0x50
 8001e32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	647b      	str	r3, [r7, #68]	; 0x44
 8001e38:	2300      	movs	r3, #0
 8001e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e44:	4b79      	ldr	r3, [pc, #484]	; (800202c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 030c 	and.w	r3, r3, #12
 8001e4c:	2b08      	cmp	r3, #8
 8001e4e:	d00d      	beq.n	8001e6c <HAL_RCC_GetSysClockFreq+0x40>
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	f200 80e1 	bhi.w	8002018 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d002      	beq.n	8001e60 <HAL_RCC_GetSysClockFreq+0x34>
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	d003      	beq.n	8001e66 <HAL_RCC_GetSysClockFreq+0x3a>
 8001e5e:	e0db      	b.n	8002018 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e60:	4b73      	ldr	r3, [pc, #460]	; (8002030 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e62:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001e64:	e0db      	b.n	800201e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e66:	4b73      	ldr	r3, [pc, #460]	; (8002034 <HAL_RCC_GetSysClockFreq+0x208>)
 8001e68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e6a:	e0d8      	b.n	800201e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e6c:	4b6f      	ldr	r3, [pc, #444]	; (800202c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e74:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e76:	4b6d      	ldr	r3, [pc, #436]	; (800202c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d063      	beq.n	8001f4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e82:	4b6a      	ldr	r3, [pc, #424]	; (800202c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	099b      	lsrs	r3, r3, #6
 8001e88:	2200      	movs	r2, #0
 8001e8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e94:	633b      	str	r3, [r7, #48]	; 0x30
 8001e96:	2300      	movs	r3, #0
 8001e98:	637b      	str	r3, [r7, #52]	; 0x34
 8001e9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e9e:	4622      	mov	r2, r4
 8001ea0:	462b      	mov	r3, r5
 8001ea2:	f04f 0000 	mov.w	r0, #0
 8001ea6:	f04f 0100 	mov.w	r1, #0
 8001eaa:	0159      	lsls	r1, r3, #5
 8001eac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001eb0:	0150      	lsls	r0, r2, #5
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	4621      	mov	r1, r4
 8001eb8:	1a51      	subs	r1, r2, r1
 8001eba:	6139      	str	r1, [r7, #16]
 8001ebc:	4629      	mov	r1, r5
 8001ebe:	eb63 0301 	sbc.w	r3, r3, r1
 8001ec2:	617b      	str	r3, [r7, #20]
 8001ec4:	f04f 0200 	mov.w	r2, #0
 8001ec8:	f04f 0300 	mov.w	r3, #0
 8001ecc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ed0:	4659      	mov	r1, fp
 8001ed2:	018b      	lsls	r3, r1, #6
 8001ed4:	4651      	mov	r1, sl
 8001ed6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001eda:	4651      	mov	r1, sl
 8001edc:	018a      	lsls	r2, r1, #6
 8001ede:	4651      	mov	r1, sl
 8001ee0:	ebb2 0801 	subs.w	r8, r2, r1
 8001ee4:	4659      	mov	r1, fp
 8001ee6:	eb63 0901 	sbc.w	r9, r3, r1
 8001eea:	f04f 0200 	mov.w	r2, #0
 8001eee:	f04f 0300 	mov.w	r3, #0
 8001ef2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ef6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001efa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001efe:	4690      	mov	r8, r2
 8001f00:	4699      	mov	r9, r3
 8001f02:	4623      	mov	r3, r4
 8001f04:	eb18 0303 	adds.w	r3, r8, r3
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	462b      	mov	r3, r5
 8001f0c:	eb49 0303 	adc.w	r3, r9, r3
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	f04f 0200 	mov.w	r2, #0
 8001f16:	f04f 0300 	mov.w	r3, #0
 8001f1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f1e:	4629      	mov	r1, r5
 8001f20:	024b      	lsls	r3, r1, #9
 8001f22:	4621      	mov	r1, r4
 8001f24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f28:	4621      	mov	r1, r4
 8001f2a:	024a      	lsls	r2, r1, #9
 8001f2c:	4610      	mov	r0, r2
 8001f2e:	4619      	mov	r1, r3
 8001f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f32:	2200      	movs	r2, #0
 8001f34:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f3c:	f7fe f9a8 	bl	8000290 <__aeabi_uldivmod>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4613      	mov	r3, r2
 8001f46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f48:	e058      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f4a:	4b38      	ldr	r3, [pc, #224]	; (800202c <HAL_RCC_GetSysClockFreq+0x200>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	099b      	lsrs	r3, r3, #6
 8001f50:	2200      	movs	r2, #0
 8001f52:	4618      	mov	r0, r3
 8001f54:	4611      	mov	r1, r2
 8001f56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f5a:	623b      	str	r3, [r7, #32]
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f64:	4642      	mov	r2, r8
 8001f66:	464b      	mov	r3, r9
 8001f68:	f04f 0000 	mov.w	r0, #0
 8001f6c:	f04f 0100 	mov.w	r1, #0
 8001f70:	0159      	lsls	r1, r3, #5
 8001f72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f76:	0150      	lsls	r0, r2, #5
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	4641      	mov	r1, r8
 8001f7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f82:	4649      	mov	r1, r9
 8001f84:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	f04f 0300 	mov.w	r3, #0
 8001f90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f9c:	ebb2 040a 	subs.w	r4, r2, sl
 8001fa0:	eb63 050b 	sbc.w	r5, r3, fp
 8001fa4:	f04f 0200 	mov.w	r2, #0
 8001fa8:	f04f 0300 	mov.w	r3, #0
 8001fac:	00eb      	lsls	r3, r5, #3
 8001fae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001fb2:	00e2      	lsls	r2, r4, #3
 8001fb4:	4614      	mov	r4, r2
 8001fb6:	461d      	mov	r5, r3
 8001fb8:	4643      	mov	r3, r8
 8001fba:	18e3      	adds	r3, r4, r3
 8001fbc:	603b      	str	r3, [r7, #0]
 8001fbe:	464b      	mov	r3, r9
 8001fc0:	eb45 0303 	adc.w	r3, r5, r3
 8001fc4:	607b      	str	r3, [r7, #4]
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	f04f 0300 	mov.w	r3, #0
 8001fce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fd2:	4629      	mov	r1, r5
 8001fd4:	028b      	lsls	r3, r1, #10
 8001fd6:	4621      	mov	r1, r4
 8001fd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fdc:	4621      	mov	r1, r4
 8001fde:	028a      	lsls	r2, r1, #10
 8001fe0:	4610      	mov	r0, r2
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	61bb      	str	r3, [r7, #24]
 8001fea:	61fa      	str	r2, [r7, #28]
 8001fec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ff0:	f7fe f94e 	bl	8000290 <__aeabi_uldivmod>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	; (800202c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	0c1b      	lsrs	r3, r3, #16
 8002002:	f003 0303 	and.w	r3, r3, #3
 8002006:	3301      	adds	r3, #1
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800200c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800200e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002010:	fbb2 f3f3 	udiv	r3, r2, r3
 8002014:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002016:	e002      	b.n	800201e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002018:	4b05      	ldr	r3, [pc, #20]	; (8002030 <HAL_RCC_GetSysClockFreq+0x204>)
 800201a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800201c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800201e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002020:	4618      	mov	r0, r3
 8002022:	3750      	adds	r7, #80	; 0x50
 8002024:	46bd      	mov	sp, r7
 8002026:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800202a:	bf00      	nop
 800202c:	40023800 	.word	0x40023800
 8002030:	00f42400 	.word	0x00f42400
 8002034:	007a1200 	.word	0x007a1200

08002038 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800203c:	4b03      	ldr	r3, [pc, #12]	; (800204c <HAL_RCC_GetHCLKFreq+0x14>)
 800203e:	681b      	ldr	r3, [r3, #0]
}
 8002040:	4618      	mov	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	20000000 	.word	0x20000000

08002050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002054:	f7ff fff0 	bl	8002038 <HAL_RCC_GetHCLKFreq>
 8002058:	4602      	mov	r2, r0
 800205a:	4b05      	ldr	r3, [pc, #20]	; (8002070 <HAL_RCC_GetPCLK1Freq+0x20>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	0a9b      	lsrs	r3, r3, #10
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	4903      	ldr	r1, [pc, #12]	; (8002074 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002066:	5ccb      	ldrb	r3, [r1, r3]
 8002068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800206c:	4618      	mov	r0, r3
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40023800 	.word	0x40023800
 8002074:	08004718 	.word	0x08004718

08002078 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800207c:	f7ff ffdc 	bl	8002038 <HAL_RCC_GetHCLKFreq>
 8002080:	4602      	mov	r2, r0
 8002082:	4b05      	ldr	r3, [pc, #20]	; (8002098 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	0b5b      	lsrs	r3, r3, #13
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	4903      	ldr	r1, [pc, #12]	; (800209c <HAL_RCC_GetPCLK2Freq+0x24>)
 800208e:	5ccb      	ldrb	r3, [r1, r3]
 8002090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002094:	4618      	mov	r0, r3
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40023800 	.word	0x40023800
 800209c:	08004718 	.word	0x08004718

080020a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e041      	b.n	8002136 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d106      	bne.n	80020cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7fe fd56 	bl	8000b78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2202      	movs	r2, #2
 80020d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3304      	adds	r3, #4
 80020dc:	4619      	mov	r1, r3
 80020de:	4610      	mov	r0, r2
 80020e0:	f000 fb26 	bl	8002730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b01      	cmp	r3, #1
 8002152:	d001      	beq.n	8002158 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e044      	b.n	80021e2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2202      	movs	r2, #2
 800215c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 0201 	orr.w	r2, r2, #1
 800216e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a1e      	ldr	r2, [pc, #120]	; (80021f0 <HAL_TIM_Base_Start_IT+0xb0>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d018      	beq.n	80021ac <HAL_TIM_Base_Start_IT+0x6c>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002182:	d013      	beq.n	80021ac <HAL_TIM_Base_Start_IT+0x6c>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a1a      	ldr	r2, [pc, #104]	; (80021f4 <HAL_TIM_Base_Start_IT+0xb4>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d00e      	beq.n	80021ac <HAL_TIM_Base_Start_IT+0x6c>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a19      	ldr	r2, [pc, #100]	; (80021f8 <HAL_TIM_Base_Start_IT+0xb8>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d009      	beq.n	80021ac <HAL_TIM_Base_Start_IT+0x6c>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a17      	ldr	r2, [pc, #92]	; (80021fc <HAL_TIM_Base_Start_IT+0xbc>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d004      	beq.n	80021ac <HAL_TIM_Base_Start_IT+0x6c>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a16      	ldr	r2, [pc, #88]	; (8002200 <HAL_TIM_Base_Start_IT+0xc0>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d111      	bne.n	80021d0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2b06      	cmp	r3, #6
 80021bc:	d010      	beq.n	80021e0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f042 0201 	orr.w	r2, r2, #1
 80021cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021ce:	e007      	b.n	80021e0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 0201 	orr.w	r2, r2, #1
 80021de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	40010000 	.word	0x40010000
 80021f4:	40000400 	.word	0x40000400
 80021f8:	40000800 	.word	0x40000800
 80021fc:	40000c00 	.word	0x40000c00
 8002200:	40014000 	.word	0x40014000

08002204 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e041      	b.n	800229a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d106      	bne.n	8002230 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f839 	bl	80022a2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2202      	movs	r2, #2
 8002234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3304      	adds	r3, #4
 8002240:	4619      	mov	r1, r3
 8002242:	4610      	mov	r0, r2
 8002244:	f000 fa74 	bl	8002730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b084      	sub	sp, #16
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d020      	beq.n	800231a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d01b      	beq.n	800231a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f06f 0202 	mvn.w	r2, #2
 80022ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	f003 0303 	and.w	r3, r3, #3
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 f9f6 	bl	80026f2 <HAL_TIM_IC_CaptureCallback>
 8002306:	e005      	b.n	8002314 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 f9e8 	bl	80026de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f9f9 	bl	8002706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	2b00      	cmp	r3, #0
 8002322:	d020      	beq.n	8002366 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f003 0304 	and.w	r3, r3, #4
 800232a:	2b00      	cmp	r3, #0
 800232c:	d01b      	beq.n	8002366 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f06f 0204 	mvn.w	r2, #4
 8002336:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2202      	movs	r2, #2
 800233c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 f9d0 	bl	80026f2 <HAL_TIM_IC_CaptureCallback>
 8002352:	e005      	b.n	8002360 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 f9c2 	bl	80026de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f9d3 	bl	8002706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	f003 0308 	and.w	r3, r3, #8
 800236c:	2b00      	cmp	r3, #0
 800236e:	d020      	beq.n	80023b2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	2b00      	cmp	r3, #0
 8002378:	d01b      	beq.n	80023b2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f06f 0208 	mvn.w	r2, #8
 8002382:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2204      	movs	r2, #4
 8002388:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f9aa 	bl	80026f2 <HAL_TIM_IC_CaptureCallback>
 800239e:	e005      	b.n	80023ac <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 f99c 	bl	80026de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 f9ad 	bl	8002706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	f003 0310 	and.w	r3, r3, #16
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d020      	beq.n	80023fe <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f003 0310 	and.w	r3, r3, #16
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d01b      	beq.n	80023fe <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f06f 0210 	mvn.w	r2, #16
 80023ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2208      	movs	r2, #8
 80023d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	69db      	ldr	r3, [r3, #28]
 80023dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d003      	beq.n	80023ec <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 f984 	bl	80026f2 <HAL_TIM_IC_CaptureCallback>
 80023ea:	e005      	b.n	80023f8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 f976 	bl	80026de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 f987 	bl	8002706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00c      	beq.n	8002422 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d007      	beq.n	8002422 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f06f 0201 	mvn.w	r2, #1
 800241a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7fe f8b5 	bl	800058c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00c      	beq.n	8002446 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002432:	2b00      	cmp	r3, #0
 8002434:	d007      	beq.n	8002446 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800243e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 fc9f 	bl	8002d84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00c      	beq.n	800246a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002456:	2b00      	cmp	r3, #0
 8002458:	d007      	beq.n	800246a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 f958 	bl	800271a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	f003 0320 	and.w	r3, r3, #32
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00c      	beq.n	800248e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f003 0320 	and.w	r3, r3, #32
 800247a:	2b00      	cmp	r3, #0
 800247c:	d007      	beq.n	800248e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f06f 0220 	mvn.w	r2, #32
 8002486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 fc71 	bl	8002d70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800248e:	bf00      	nop
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024a4:	2300      	movs	r3, #0
 80024a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d101      	bne.n	80024b6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80024b2:	2302      	movs	r3, #2
 80024b4:	e048      	b.n	8002548 <HAL_TIM_OC_ConfigChannel+0xb0>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b0c      	cmp	r3, #12
 80024c2:	d839      	bhi.n	8002538 <HAL_TIM_OC_ConfigChannel+0xa0>
 80024c4:	a201      	add	r2, pc, #4	; (adr r2, 80024cc <HAL_TIM_OC_ConfigChannel+0x34>)
 80024c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ca:	bf00      	nop
 80024cc:	08002501 	.word	0x08002501
 80024d0:	08002539 	.word	0x08002539
 80024d4:	08002539 	.word	0x08002539
 80024d8:	08002539 	.word	0x08002539
 80024dc:	0800250f 	.word	0x0800250f
 80024e0:	08002539 	.word	0x08002539
 80024e4:	08002539 	.word	0x08002539
 80024e8:	08002539 	.word	0x08002539
 80024ec:	0800251d 	.word	0x0800251d
 80024f0:	08002539 	.word	0x08002539
 80024f4:	08002539 	.word	0x08002539
 80024f8:	08002539 	.word	0x08002539
 80024fc:	0800252b 	.word	0x0800252b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68b9      	ldr	r1, [r7, #8]
 8002506:	4618      	mov	r0, r3
 8002508:	f000 f99e 	bl	8002848 <TIM_OC1_SetConfig>
      break;
 800250c:	e017      	b.n	800253e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68b9      	ldr	r1, [r7, #8]
 8002514:	4618      	mov	r0, r3
 8002516:	f000 f9fd 	bl	8002914 <TIM_OC2_SetConfig>
      break;
 800251a:	e010      	b.n	800253e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68b9      	ldr	r1, [r7, #8]
 8002522:	4618      	mov	r0, r3
 8002524:	f000 fa62 	bl	80029ec <TIM_OC3_SetConfig>
      break;
 8002528:	e009      	b.n	800253e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68b9      	ldr	r1, [r7, #8]
 8002530:	4618      	mov	r0, r3
 8002532:	f000 fac5 	bl	8002ac0 <TIM_OC4_SetConfig>
      break;
 8002536:	e002      	b.n	800253e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	75fb      	strb	r3, [r7, #23]
      break;
 800253c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002546:	7dfb      	ldrb	r3, [r7, #23]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3718      	adds	r7, #24
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800255a:	2300      	movs	r3, #0
 800255c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002564:	2b01      	cmp	r3, #1
 8002566:	d101      	bne.n	800256c <HAL_TIM_ConfigClockSource+0x1c>
 8002568:	2302      	movs	r3, #2
 800256a:	e0b4      	b.n	80026d6 <HAL_TIM_ConfigClockSource+0x186>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2202      	movs	r2, #2
 8002578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800258a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002592:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68ba      	ldr	r2, [r7, #8]
 800259a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025a4:	d03e      	beq.n	8002624 <HAL_TIM_ConfigClockSource+0xd4>
 80025a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025aa:	f200 8087 	bhi.w	80026bc <HAL_TIM_ConfigClockSource+0x16c>
 80025ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025b2:	f000 8086 	beq.w	80026c2 <HAL_TIM_ConfigClockSource+0x172>
 80025b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ba:	d87f      	bhi.n	80026bc <HAL_TIM_ConfigClockSource+0x16c>
 80025bc:	2b70      	cmp	r3, #112	; 0x70
 80025be:	d01a      	beq.n	80025f6 <HAL_TIM_ConfigClockSource+0xa6>
 80025c0:	2b70      	cmp	r3, #112	; 0x70
 80025c2:	d87b      	bhi.n	80026bc <HAL_TIM_ConfigClockSource+0x16c>
 80025c4:	2b60      	cmp	r3, #96	; 0x60
 80025c6:	d050      	beq.n	800266a <HAL_TIM_ConfigClockSource+0x11a>
 80025c8:	2b60      	cmp	r3, #96	; 0x60
 80025ca:	d877      	bhi.n	80026bc <HAL_TIM_ConfigClockSource+0x16c>
 80025cc:	2b50      	cmp	r3, #80	; 0x50
 80025ce:	d03c      	beq.n	800264a <HAL_TIM_ConfigClockSource+0xfa>
 80025d0:	2b50      	cmp	r3, #80	; 0x50
 80025d2:	d873      	bhi.n	80026bc <HAL_TIM_ConfigClockSource+0x16c>
 80025d4:	2b40      	cmp	r3, #64	; 0x40
 80025d6:	d058      	beq.n	800268a <HAL_TIM_ConfigClockSource+0x13a>
 80025d8:	2b40      	cmp	r3, #64	; 0x40
 80025da:	d86f      	bhi.n	80026bc <HAL_TIM_ConfigClockSource+0x16c>
 80025dc:	2b30      	cmp	r3, #48	; 0x30
 80025de:	d064      	beq.n	80026aa <HAL_TIM_ConfigClockSource+0x15a>
 80025e0:	2b30      	cmp	r3, #48	; 0x30
 80025e2:	d86b      	bhi.n	80026bc <HAL_TIM_ConfigClockSource+0x16c>
 80025e4:	2b20      	cmp	r3, #32
 80025e6:	d060      	beq.n	80026aa <HAL_TIM_ConfigClockSource+0x15a>
 80025e8:	2b20      	cmp	r3, #32
 80025ea:	d867      	bhi.n	80026bc <HAL_TIM_ConfigClockSource+0x16c>
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d05c      	beq.n	80026aa <HAL_TIM_ConfigClockSource+0x15a>
 80025f0:	2b10      	cmp	r3, #16
 80025f2:	d05a      	beq.n	80026aa <HAL_TIM_ConfigClockSource+0x15a>
 80025f4:	e062      	b.n	80026bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002606:	f000 fb25 	bl	8002c54 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002618:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	609a      	str	r2, [r3, #8]
      break;
 8002622:	e04f      	b.n	80026c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002634:	f000 fb0e 	bl	8002c54 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689a      	ldr	r2, [r3, #8]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002646:	609a      	str	r2, [r3, #8]
      break;
 8002648:	e03c      	b.n	80026c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002656:	461a      	mov	r2, r3
 8002658:	f000 fa82 	bl	8002b60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2150      	movs	r1, #80	; 0x50
 8002662:	4618      	mov	r0, r3
 8002664:	f000 fadb 	bl	8002c1e <TIM_ITRx_SetConfig>
      break;
 8002668:	e02c      	b.n	80026c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002676:	461a      	mov	r2, r3
 8002678:	f000 faa1 	bl	8002bbe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2160      	movs	r1, #96	; 0x60
 8002682:	4618      	mov	r0, r3
 8002684:	f000 facb 	bl	8002c1e <TIM_ITRx_SetConfig>
      break;
 8002688:	e01c      	b.n	80026c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002696:	461a      	mov	r2, r3
 8002698:	f000 fa62 	bl	8002b60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2140      	movs	r1, #64	; 0x40
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 fabb 	bl	8002c1e <TIM_ITRx_SetConfig>
      break;
 80026a8:	e00c      	b.n	80026c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4619      	mov	r1, r3
 80026b4:	4610      	mov	r0, r2
 80026b6:	f000 fab2 	bl	8002c1e <TIM_ITRx_SetConfig>
      break;
 80026ba:	e003      	b.n	80026c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	73fb      	strb	r3, [r7, #15]
      break;
 80026c0:	e000      	b.n	80026c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80026c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
	...

08002730 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a3a      	ldr	r2, [pc, #232]	; (800282c <TIM_Base_SetConfig+0xfc>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d00f      	beq.n	8002768 <TIM_Base_SetConfig+0x38>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800274e:	d00b      	beq.n	8002768 <TIM_Base_SetConfig+0x38>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a37      	ldr	r2, [pc, #220]	; (8002830 <TIM_Base_SetConfig+0x100>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d007      	beq.n	8002768 <TIM_Base_SetConfig+0x38>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a36      	ldr	r2, [pc, #216]	; (8002834 <TIM_Base_SetConfig+0x104>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d003      	beq.n	8002768 <TIM_Base_SetConfig+0x38>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a35      	ldr	r2, [pc, #212]	; (8002838 <TIM_Base_SetConfig+0x108>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d108      	bne.n	800277a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800276e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	4313      	orrs	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a2b      	ldr	r2, [pc, #172]	; (800282c <TIM_Base_SetConfig+0xfc>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d01b      	beq.n	80027ba <TIM_Base_SetConfig+0x8a>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002788:	d017      	beq.n	80027ba <TIM_Base_SetConfig+0x8a>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a28      	ldr	r2, [pc, #160]	; (8002830 <TIM_Base_SetConfig+0x100>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d013      	beq.n	80027ba <TIM_Base_SetConfig+0x8a>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a27      	ldr	r2, [pc, #156]	; (8002834 <TIM_Base_SetConfig+0x104>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d00f      	beq.n	80027ba <TIM_Base_SetConfig+0x8a>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a26      	ldr	r2, [pc, #152]	; (8002838 <TIM_Base_SetConfig+0x108>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d00b      	beq.n	80027ba <TIM_Base_SetConfig+0x8a>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a25      	ldr	r2, [pc, #148]	; (800283c <TIM_Base_SetConfig+0x10c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d007      	beq.n	80027ba <TIM_Base_SetConfig+0x8a>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a24      	ldr	r2, [pc, #144]	; (8002840 <TIM_Base_SetConfig+0x110>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d003      	beq.n	80027ba <TIM_Base_SetConfig+0x8a>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a23      	ldr	r2, [pc, #140]	; (8002844 <TIM_Base_SetConfig+0x114>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d108      	bne.n	80027cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a0e      	ldr	r2, [pc, #56]	; (800282c <TIM_Base_SetConfig+0xfc>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d103      	bne.n	8002800 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	691a      	ldr	r2, [r3, #16]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b01      	cmp	r3, #1
 8002810:	d105      	bne.n	800281e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	f023 0201 	bic.w	r2, r3, #1
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	611a      	str	r2, [r3, #16]
  }
}
 800281e:	bf00      	nop
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40010000 	.word	0x40010000
 8002830:	40000400 	.word	0x40000400
 8002834:	40000800 	.word	0x40000800
 8002838:	40000c00 	.word	0x40000c00
 800283c:	40014000 	.word	0x40014000
 8002840:	40014400 	.word	0x40014400
 8002844:	40014800 	.word	0x40014800

08002848 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002848:	b480      	push	{r7}
 800284a:	b087      	sub	sp, #28
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	f023 0201 	bic.w	r2, r3, #1
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f023 0303 	bic.w	r3, r3, #3
 800287e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	4313      	orrs	r3, r2
 8002888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f023 0302 	bic.w	r3, r3, #2
 8002890:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	4313      	orrs	r3, r2
 800289a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a1c      	ldr	r2, [pc, #112]	; (8002910 <TIM_OC1_SetConfig+0xc8>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d10c      	bne.n	80028be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	f023 0308 	bic.w	r3, r3, #8
 80028aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	f023 0304 	bic.w	r3, r3, #4
 80028bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a13      	ldr	r2, [pc, #76]	; (8002910 <TIM_OC1_SetConfig+0xc8>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d111      	bne.n	80028ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	4313      	orrs	r3, r2
 80028de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	621a      	str	r2, [r3, #32]
}
 8002904:	bf00      	nop
 8002906:	371c      	adds	r7, #28
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	40010000 	.word	0x40010000

08002914 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002914:	b480      	push	{r7}
 8002916:	b087      	sub	sp, #28
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	f023 0210 	bic.w	r2, r3, #16
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800294a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	021b      	lsls	r3, r3, #8
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	4313      	orrs	r3, r2
 8002956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f023 0320 	bic.w	r3, r3, #32
 800295e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	011b      	lsls	r3, r3, #4
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	4313      	orrs	r3, r2
 800296a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a1e      	ldr	r2, [pc, #120]	; (80029e8 <TIM_OC2_SetConfig+0xd4>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d10d      	bne.n	8002990 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800297a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	011b      	lsls	r3, r3, #4
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	4313      	orrs	r3, r2
 8002986:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800298e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a15      	ldr	r2, [pc, #84]	; (80029e8 <TIM_OC2_SetConfig+0xd4>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d113      	bne.n	80029c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800299e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	4313      	orrs	r3, r2
 80029be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	621a      	str	r2, [r3, #32]
}
 80029da:	bf00      	nop
 80029dc:	371c      	adds	r7, #28
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	40010000 	.word	0x40010000

080029ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b087      	sub	sp, #28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f023 0303 	bic.w	r3, r3, #3
 8002a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	021b      	lsls	r3, r3, #8
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a1d      	ldr	r2, [pc, #116]	; (8002abc <TIM_OC3_SetConfig+0xd0>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d10d      	bne.n	8002a66 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	021b      	lsls	r3, r3, #8
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a14      	ldr	r2, [pc, #80]	; (8002abc <TIM_OC3_SetConfig+0xd0>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d113      	bne.n	8002a96 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	011b      	lsls	r3, r3, #4
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	011b      	lsls	r3, r3, #4
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	621a      	str	r2, [r3, #32]
}
 8002ab0:	bf00      	nop
 8002ab2:	371c      	adds	r7, #28
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	40010000 	.word	0x40010000

08002ac0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b087      	sub	sp, #28
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002af6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	021b      	lsls	r3, r3, #8
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	031b      	lsls	r3, r3, #12
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a10      	ldr	r2, [pc, #64]	; (8002b5c <TIM_OC4_SetConfig+0x9c>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d109      	bne.n	8002b34 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	019b      	lsls	r3, r3, #6
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	621a      	str	r2, [r3, #32]
}
 8002b4e:	bf00      	nop
 8002b50:	371c      	adds	r7, #28
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	40010000 	.word	0x40010000

08002b60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b087      	sub	sp, #28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	f023 0201 	bic.w	r2, r3, #1
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	011b      	lsls	r3, r3, #4
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	f023 030a 	bic.w	r3, r3, #10
 8002b9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	621a      	str	r2, [r3, #32]
}
 8002bb2:	bf00      	nop
 8002bb4:	371c      	adds	r7, #28
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b087      	sub	sp, #28
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	60f8      	str	r0, [r7, #12]
 8002bc6:	60b9      	str	r1, [r7, #8]
 8002bc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	f023 0210 	bic.w	r2, r3, #16
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002be8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	031b      	lsls	r3, r3, #12
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002bfa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	621a      	str	r2, [r3, #32]
}
 8002c12:	bf00      	nop
 8002c14:	371c      	adds	r7, #28
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b085      	sub	sp, #20
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
 8002c26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	f043 0307 	orr.w	r3, r3, #7
 8002c40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	609a      	str	r2, [r3, #8]
}
 8002c48:	bf00      	nop
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b087      	sub	sp, #28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
 8002c60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	021a      	lsls	r2, r3, #8
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	431a      	orrs	r2, r3
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	609a      	str	r2, [r3, #8]
}
 8002c88:	bf00      	nop
 8002c8a:	371c      	adds	r7, #28
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d101      	bne.n	8002cac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	e050      	b.n	8002d4e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a1c      	ldr	r2, [pc, #112]	; (8002d5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d018      	beq.n	8002d22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf8:	d013      	beq.n	8002d22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a18      	ldr	r2, [pc, #96]	; (8002d60 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d00e      	beq.n	8002d22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a16      	ldr	r2, [pc, #88]	; (8002d64 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d009      	beq.n	8002d22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a15      	ldr	r2, [pc, #84]	; (8002d68 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d004      	beq.n	8002d22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a13      	ldr	r2, [pc, #76]	; (8002d6c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d10c      	bne.n	8002d3c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68ba      	ldr	r2, [r7, #8]
 8002d3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40010000 	.word	0x40010000
 8002d60:	40000400 	.word	0x40000400
 8002d64:	40000800 	.word	0x40000800
 8002d68:	40000c00 	.word	0x40000c00
 8002d6c:	40014000 	.word	0x40014000

08002d70 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e042      	b.n	8002e30 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d106      	bne.n	8002dc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7fd ffc8 	bl	8000d54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2224      	movs	r2, #36	; 0x24
 8002dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68da      	ldr	r2, [r3, #12]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 fd69 	bl	80038b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	691a      	ldr	r2, [r3, #16]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002df0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	695a      	ldr	r2, [r3, #20]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68da      	ldr	r2, [r3, #12]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b08a      	sub	sp, #40	; 0x28
 8002e3c:	af02      	add	r7, sp, #8
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	603b      	str	r3, [r7, #0]
 8002e44:	4613      	mov	r3, r2
 8002e46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b20      	cmp	r3, #32
 8002e56:	d175      	bne.n	8002f44 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d002      	beq.n	8002e64 <HAL_UART_Transmit+0x2c>
 8002e5e:	88fb      	ldrh	r3, [r7, #6]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e06e      	b.n	8002f46 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2221      	movs	r2, #33	; 0x21
 8002e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e76:	f7fe f8ef 	bl	8001058 <HAL_GetTick>
 8002e7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	88fa      	ldrh	r2, [r7, #6]
 8002e80:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	88fa      	ldrh	r2, [r7, #6]
 8002e86:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e90:	d108      	bne.n	8002ea4 <HAL_UART_Transmit+0x6c>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d104      	bne.n	8002ea4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	61bb      	str	r3, [r7, #24]
 8002ea2:	e003      	b.n	8002eac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002eac:	e02e      	b.n	8002f0c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	2180      	movs	r1, #128	; 0x80
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 fb05 	bl	80034c8 <UART_WaitOnFlagUntilTimeout>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d005      	beq.n	8002ed0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e03a      	b.n	8002f46 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10b      	bne.n	8002eee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	881b      	ldrh	r3, [r3, #0]
 8002eda:	461a      	mov	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ee4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	3302      	adds	r3, #2
 8002eea:	61bb      	str	r3, [r7, #24]
 8002eec:	e007      	b.n	8002efe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	781a      	ldrb	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	3301      	adds	r3, #1
 8002efc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	3b01      	subs	r3, #1
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1cb      	bne.n	8002eae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	2140      	movs	r1, #64	; 0x40
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 fad1 	bl	80034c8 <UART_WaitOnFlagUntilTimeout>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d005      	beq.n	8002f38 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e006      	b.n	8002f46 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002f40:	2300      	movs	r3, #0
 8002f42:	e000      	b.n	8002f46 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002f44:	2302      	movs	r3, #2
  }
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3720      	adds	r7, #32
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
	...

08002f50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b0ba      	sub	sp, #232	; 0xe8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002f8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10f      	bne.n	8002fb6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f9a:	f003 0320 	and.w	r3, r3, #32
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d009      	beq.n	8002fb6 <HAL_UART_IRQHandler+0x66>
 8002fa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fa6:	f003 0320 	and.w	r3, r3, #32
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 fbc2 	bl	8003738 <UART_Receive_IT>
      return;
 8002fb4:	e25b      	b.n	800346e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002fb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 80de 	beq.w	800317c <HAL_UART_IRQHandler+0x22c>
 8002fc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d106      	bne.n	8002fda <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fd0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 80d1 	beq.w	800317c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00b      	beq.n	8002ffe <HAL_UART_IRQHandler+0xae>
 8002fe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d005      	beq.n	8002ffe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff6:	f043 0201 	orr.w	r2, r3, #1
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003002:	f003 0304 	and.w	r3, r3, #4
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00b      	beq.n	8003022 <HAL_UART_IRQHandler+0xd2>
 800300a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d005      	beq.n	8003022 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301a:	f043 0202 	orr.w	r2, r3, #2
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00b      	beq.n	8003046 <HAL_UART_IRQHandler+0xf6>
 800302e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	d005      	beq.n	8003046 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303e:	f043 0204 	orr.w	r2, r3, #4
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b00      	cmp	r3, #0
 8003050:	d011      	beq.n	8003076 <HAL_UART_IRQHandler+0x126>
 8003052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003056:	f003 0320 	and.w	r3, r3, #32
 800305a:	2b00      	cmp	r3, #0
 800305c:	d105      	bne.n	800306a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800305e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d005      	beq.n	8003076 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306e:	f043 0208 	orr.w	r2, r3, #8
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 81f2 	beq.w	8003464 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003084:	f003 0320 	and.w	r3, r3, #32
 8003088:	2b00      	cmp	r3, #0
 800308a:	d008      	beq.n	800309e <HAL_UART_IRQHandler+0x14e>
 800308c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003090:	f003 0320 	and.w	r3, r3, #32
 8003094:	2b00      	cmp	r3, #0
 8003096:	d002      	beq.n	800309e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 fb4d 	bl	8003738 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a8:	2b40      	cmp	r3, #64	; 0x40
 80030aa:	bf0c      	ite	eq
 80030ac:	2301      	moveq	r3, #1
 80030ae:	2300      	movne	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d103      	bne.n	80030ca <HAL_UART_IRQHandler+0x17a>
 80030c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d04f      	beq.n	800316a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 fa55 	bl	800357a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030da:	2b40      	cmp	r3, #64	; 0x40
 80030dc:	d141      	bne.n	8003162 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	3314      	adds	r3, #20
 80030e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030ec:	e853 3f00 	ldrex	r3, [r3]
 80030f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80030f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	3314      	adds	r3, #20
 8003106:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800310a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800310e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003112:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003116:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800311a:	e841 2300 	strex	r3, r2, [r1]
 800311e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003122:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1d9      	bne.n	80030de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312e:	2b00      	cmp	r3, #0
 8003130:	d013      	beq.n	800315a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003136:	4a7e      	ldr	r2, [pc, #504]	; (8003330 <HAL_UART_IRQHandler+0x3e0>)
 8003138:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800313e:	4618      	mov	r0, r3
 8003140:	f7fe f917 	bl	8001372 <HAL_DMA_Abort_IT>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d016      	beq.n	8003178 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003154:	4610      	mov	r0, r2
 8003156:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003158:	e00e      	b.n	8003178 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f99e 	bl	800349c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003160:	e00a      	b.n	8003178 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f99a 	bl	800349c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003168:	e006      	b.n	8003178 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f996 	bl	800349c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003176:	e175      	b.n	8003464 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003178:	bf00      	nop
    return;
 800317a:	e173      	b.n	8003464 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003180:	2b01      	cmp	r3, #1
 8003182:	f040 814f 	bne.w	8003424 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800318a:	f003 0310 	and.w	r3, r3, #16
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 8148 	beq.w	8003424 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003198:	f003 0310 	and.w	r3, r3, #16
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 8141 	beq.w	8003424 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031a2:	2300      	movs	r3, #0
 80031a4:	60bb      	str	r3, [r7, #8]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	60bb      	str	r3, [r7, #8]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	60bb      	str	r3, [r7, #8]
 80031b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c2:	2b40      	cmp	r3, #64	; 0x40
 80031c4:	f040 80b6 	bne.w	8003334 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80031d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 8145 	beq.w	8003468 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031e6:	429a      	cmp	r2, r3
 80031e8:	f080 813e 	bcs.w	8003468 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031fe:	f000 8088 	beq.w	8003312 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	330c      	adds	r3, #12
 8003208:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003210:	e853 3f00 	ldrex	r3, [r3]
 8003214:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003218:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800321c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003220:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	330c      	adds	r3, #12
 800322a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800322e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003232:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003236:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800323a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800323e:	e841 2300 	strex	r3, r2, [r1]
 8003242:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003246:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1d9      	bne.n	8003202 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	3314      	adds	r3, #20
 8003254:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003256:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003258:	e853 3f00 	ldrex	r3, [r3]
 800325c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800325e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003260:	f023 0301 	bic.w	r3, r3, #1
 8003264:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	3314      	adds	r3, #20
 800326e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003272:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003276:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003278:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800327a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800327e:	e841 2300 	strex	r3, r2, [r1]
 8003282:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003284:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1e1      	bne.n	800324e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	3314      	adds	r3, #20
 8003290:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003292:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003294:	e853 3f00 	ldrex	r3, [r3]
 8003298:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800329a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800329c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	3314      	adds	r3, #20
 80032aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80032ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80032b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032b6:	e841 2300 	strex	r3, r2, [r1]
 80032ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80032bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1e3      	bne.n	800328a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2220      	movs	r2, #32
 80032c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	330c      	adds	r3, #12
 80032d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032da:	e853 3f00 	ldrex	r3, [r3]
 80032de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80032e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032e2:	f023 0310 	bic.w	r3, r3, #16
 80032e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	330c      	adds	r3, #12
 80032f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80032f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80032f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80032fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032fc:	e841 2300 	strex	r3, r2, [r1]
 8003300:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1e3      	bne.n	80032d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800330c:	4618      	mov	r0, r3
 800330e:	f7fd ffc0 	bl	8001292 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2202      	movs	r2, #2
 8003316:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003320:	b29b      	uxth	r3, r3
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	b29b      	uxth	r3, r3
 8003326:	4619      	mov	r1, r3
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f8c1 	bl	80034b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800332e:	e09b      	b.n	8003468 <HAL_UART_IRQHandler+0x518>
 8003330:	08003641 	.word	0x08003641
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800333c:	b29b      	uxth	r3, r3
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003348:	b29b      	uxth	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 808e 	beq.w	800346c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003350:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 8089 	beq.w	800346c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	330c      	adds	r3, #12
 8003360:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003364:	e853 3f00 	ldrex	r3, [r3]
 8003368:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800336a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800336c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003370:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	330c      	adds	r3, #12
 800337a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800337e:	647a      	str	r2, [r7, #68]	; 0x44
 8003380:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003382:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003384:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003386:	e841 2300 	strex	r3, r2, [r1]
 800338a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800338c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1e3      	bne.n	800335a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	3314      	adds	r3, #20
 8003398:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	e853 3f00 	ldrex	r3, [r3]
 80033a0:	623b      	str	r3, [r7, #32]
   return(result);
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	f023 0301 	bic.w	r3, r3, #1
 80033a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3314      	adds	r3, #20
 80033b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033b6:	633a      	str	r2, [r7, #48]	; 0x30
 80033b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033be:	e841 2300 	strex	r3, r2, [r1]
 80033c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1e3      	bne.n	8003392 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2220      	movs	r2, #32
 80033ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	330c      	adds	r3, #12
 80033de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	e853 3f00 	ldrex	r3, [r3]
 80033e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f023 0310 	bic.w	r3, r3, #16
 80033ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	330c      	adds	r3, #12
 80033f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80033fc:	61fa      	str	r2, [r7, #28]
 80033fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003400:	69b9      	ldr	r1, [r7, #24]
 8003402:	69fa      	ldr	r2, [r7, #28]
 8003404:	e841 2300 	strex	r3, r2, [r1]
 8003408:	617b      	str	r3, [r7, #20]
   return(result);
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1e3      	bne.n	80033d8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003416:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800341a:	4619      	mov	r1, r3
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 f847 	bl	80034b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003422:	e023      	b.n	800346c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342c:	2b00      	cmp	r3, #0
 800342e:	d009      	beq.n	8003444 <HAL_UART_IRQHandler+0x4f4>
 8003430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 f913 	bl	8003668 <UART_Transmit_IT>
    return;
 8003442:	e014      	b.n	800346e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00e      	beq.n	800346e <HAL_UART_IRQHandler+0x51e>
 8003450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003458:	2b00      	cmp	r3, #0
 800345a:	d008      	beq.n	800346e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 f953 	bl	8003708 <UART_EndTransmit_IT>
    return;
 8003462:	e004      	b.n	800346e <HAL_UART_IRQHandler+0x51e>
    return;
 8003464:	bf00      	nop
 8003466:	e002      	b.n	800346e <HAL_UART_IRQHandler+0x51e>
      return;
 8003468:	bf00      	nop
 800346a:	e000      	b.n	800346e <HAL_UART_IRQHandler+0x51e>
      return;
 800346c:	bf00      	nop
  }
}
 800346e:	37e8      	adds	r7, #232	; 0xe8
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	460b      	mov	r3, r1
 80034ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	603b      	str	r3, [r7, #0]
 80034d4:	4613      	mov	r3, r2
 80034d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034d8:	e03b      	b.n	8003552 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e0:	d037      	beq.n	8003552 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034e2:	f7fd fdb9 	bl	8001058 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	6a3a      	ldr	r2, [r7, #32]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d302      	bcc.n	80034f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80034f2:	6a3b      	ldr	r3, [r7, #32]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d101      	bne.n	80034fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e03a      	b.n	8003572 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	f003 0304 	and.w	r3, r3, #4
 8003506:	2b00      	cmp	r3, #0
 8003508:	d023      	beq.n	8003552 <UART_WaitOnFlagUntilTimeout+0x8a>
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	2b80      	cmp	r3, #128	; 0x80
 800350e:	d020      	beq.n	8003552 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	2b40      	cmp	r3, #64	; 0x40
 8003514:	d01d      	beq.n	8003552 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0308 	and.w	r3, r3, #8
 8003520:	2b08      	cmp	r3, #8
 8003522:	d116      	bne.n	8003552 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003524:	2300      	movs	r3, #0
 8003526:	617b      	str	r3, [r7, #20]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	617b      	str	r3, [r7, #20]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	617b      	str	r3, [r7, #20]
 8003538:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f000 f81d 	bl	800357a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2208      	movs	r2, #8
 8003544:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e00f      	b.n	8003572 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	4013      	ands	r3, r2
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	429a      	cmp	r2, r3
 8003560:	bf0c      	ite	eq
 8003562:	2301      	moveq	r3, #1
 8003564:	2300      	movne	r3, #0
 8003566:	b2db      	uxtb	r3, r3
 8003568:	461a      	mov	r2, r3
 800356a:	79fb      	ldrb	r3, [r7, #7]
 800356c:	429a      	cmp	r2, r3
 800356e:	d0b4      	beq.n	80034da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800357a:	b480      	push	{r7}
 800357c:	b095      	sub	sp, #84	; 0x54
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	330c      	adds	r3, #12
 8003588:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800358a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800358c:	e853 3f00 	ldrex	r3, [r3]
 8003590:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003594:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003598:	64fb      	str	r3, [r7, #76]	; 0x4c
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	330c      	adds	r3, #12
 80035a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035a2:	643a      	str	r2, [r7, #64]	; 0x40
 80035a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80035a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035aa:	e841 2300 	strex	r3, r2, [r1]
 80035ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1e5      	bne.n	8003582 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	3314      	adds	r3, #20
 80035bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	e853 3f00 	ldrex	r3, [r3]
 80035c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	f023 0301 	bic.w	r3, r3, #1
 80035cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	3314      	adds	r3, #20
 80035d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035de:	e841 2300 	strex	r3, r2, [r1]
 80035e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1e5      	bne.n	80035b6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d119      	bne.n	8003626 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	330c      	adds	r3, #12
 80035f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	e853 3f00 	ldrex	r3, [r3]
 8003600:	60bb      	str	r3, [r7, #8]
   return(result);
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	f023 0310 	bic.w	r3, r3, #16
 8003608:	647b      	str	r3, [r7, #68]	; 0x44
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	330c      	adds	r3, #12
 8003610:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003612:	61ba      	str	r2, [r7, #24]
 8003614:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003616:	6979      	ldr	r1, [r7, #20]
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	e841 2300 	strex	r3, r2, [r1]
 800361e:	613b      	str	r3, [r7, #16]
   return(result);
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1e5      	bne.n	80035f2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2220      	movs	r2, #32
 800362a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003634:	bf00      	nop
 8003636:	3754      	adds	r7, #84	; 0x54
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f7ff ff1e 	bl	800349c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003660:	bf00      	nop
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b21      	cmp	r3, #33	; 0x21
 800367a:	d13e      	bne.n	80036fa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003684:	d114      	bne.n	80036b0 <UART_Transmit_IT+0x48>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d110      	bne.n	80036b0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	881b      	ldrh	r3, [r3, #0]
 8003698:	461a      	mov	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036a2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	1c9a      	adds	r2, r3, #2
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	621a      	str	r2, [r3, #32]
 80036ae:	e008      	b.n	80036c2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	1c59      	adds	r1, r3, #1
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6211      	str	r1, [r2, #32]
 80036ba:	781a      	ldrb	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	3b01      	subs	r3, #1
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	4619      	mov	r1, r3
 80036d0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10f      	bne.n	80036f6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68da      	ldr	r2, [r3, #12]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036e4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68da      	ldr	r2, [r3, #12]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036f4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80036f6:	2300      	movs	r3, #0
 80036f8:	e000      	b.n	80036fc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80036fa:	2302      	movs	r3, #2
  }
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3714      	adds	r7, #20
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800371e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2220      	movs	r2, #32
 8003724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f7ff fea3 	bl	8003474 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b08c      	sub	sp, #48	; 0x30
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b22      	cmp	r3, #34	; 0x22
 800374a:	f040 80ae 	bne.w	80038aa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003756:	d117      	bne.n	8003788 <UART_Receive_IT+0x50>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d113      	bne.n	8003788 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003760:	2300      	movs	r3, #0
 8003762:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003768:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	b29b      	uxth	r3, r3
 8003772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003776:	b29a      	uxth	r2, r3
 8003778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003780:	1c9a      	adds	r2, r3, #2
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	629a      	str	r2, [r3, #40]	; 0x28
 8003786:	e026      	b.n	80037d6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800378e:	2300      	movs	r3, #0
 8003790:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800379a:	d007      	beq.n	80037ac <UART_Receive_IT+0x74>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10a      	bne.n	80037ba <UART_Receive_IT+0x82>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d106      	bne.n	80037ba <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	b2da      	uxtb	r2, r3
 80037b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b6:	701a      	strb	r2, [r3, #0]
 80037b8:	e008      	b.n	80037cc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037c6:	b2da      	uxtb	r2, r3
 80037c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ca:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d0:	1c5a      	adds	r2, r3, #1
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037da:	b29b      	uxth	r3, r3
 80037dc:	3b01      	subs	r3, #1
 80037de:	b29b      	uxth	r3, r3
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	4619      	mov	r1, r3
 80037e4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d15d      	bne.n	80038a6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68da      	ldr	r2, [r3, #12]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0220 	bic.w	r2, r2, #32
 80037f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68da      	ldr	r2, [r3, #12]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003808:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	695a      	ldr	r2, [r3, #20]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 0201 	bic.w	r2, r2, #1
 8003818:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2220      	movs	r2, #32
 800381e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382c:	2b01      	cmp	r3, #1
 800382e:	d135      	bne.n	800389c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	330c      	adds	r3, #12
 800383c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	e853 3f00 	ldrex	r3, [r3]
 8003844:	613b      	str	r3, [r7, #16]
   return(result);
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	f023 0310 	bic.w	r3, r3, #16
 800384c:	627b      	str	r3, [r7, #36]	; 0x24
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	330c      	adds	r3, #12
 8003854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003856:	623a      	str	r2, [r7, #32]
 8003858:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385a:	69f9      	ldr	r1, [r7, #28]
 800385c:	6a3a      	ldr	r2, [r7, #32]
 800385e:	e841 2300 	strex	r3, r2, [r1]
 8003862:	61bb      	str	r3, [r7, #24]
   return(result);
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1e5      	bne.n	8003836 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0310 	and.w	r3, r3, #16
 8003874:	2b10      	cmp	r3, #16
 8003876:	d10a      	bne.n	800388e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003878:	2300      	movs	r3, #0
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	60fb      	str	r3, [r7, #12]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003892:	4619      	mov	r1, r3
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f7ff fe0b 	bl	80034b0 <HAL_UARTEx_RxEventCallback>
 800389a:	e002      	b.n	80038a2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f7ff fdf3 	bl	8003488 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80038a2:	2300      	movs	r3, #0
 80038a4:	e002      	b.n	80038ac <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80038a6:	2300      	movs	r3, #0
 80038a8:	e000      	b.n	80038ac <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80038aa:	2302      	movs	r3, #2
  }
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3730      	adds	r7, #48	; 0x30
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038b8:	b0c0      	sub	sp, #256	; 0x100
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80038cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d0:	68d9      	ldr	r1, [r3, #12]
 80038d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	ea40 0301 	orr.w	r3, r0, r1
 80038dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	431a      	orrs	r2, r3
 80038ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	431a      	orrs	r2, r3
 80038f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800390c:	f021 010c 	bic.w	r1, r1, #12
 8003910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800391a:	430b      	orrs	r3, r1
 800391c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800391e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800392a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800392e:	6999      	ldr	r1, [r3, #24]
 8003930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	ea40 0301 	orr.w	r3, r0, r1
 800393a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800393c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	4b8f      	ldr	r3, [pc, #572]	; (8003b80 <UART_SetConfig+0x2cc>)
 8003944:	429a      	cmp	r2, r3
 8003946:	d005      	beq.n	8003954 <UART_SetConfig+0xa0>
 8003948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	4b8d      	ldr	r3, [pc, #564]	; (8003b84 <UART_SetConfig+0x2d0>)
 8003950:	429a      	cmp	r2, r3
 8003952:	d104      	bne.n	800395e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003954:	f7fe fb90 	bl	8002078 <HAL_RCC_GetPCLK2Freq>
 8003958:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800395c:	e003      	b.n	8003966 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800395e:	f7fe fb77 	bl	8002050 <HAL_RCC_GetPCLK1Freq>
 8003962:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800396a:	69db      	ldr	r3, [r3, #28]
 800396c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003970:	f040 810c 	bne.w	8003b8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003974:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003978:	2200      	movs	r2, #0
 800397a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800397e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003982:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003986:	4622      	mov	r2, r4
 8003988:	462b      	mov	r3, r5
 800398a:	1891      	adds	r1, r2, r2
 800398c:	65b9      	str	r1, [r7, #88]	; 0x58
 800398e:	415b      	adcs	r3, r3
 8003990:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003992:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003996:	4621      	mov	r1, r4
 8003998:	eb12 0801 	adds.w	r8, r2, r1
 800399c:	4629      	mov	r1, r5
 800399e:	eb43 0901 	adc.w	r9, r3, r1
 80039a2:	f04f 0200 	mov.w	r2, #0
 80039a6:	f04f 0300 	mov.w	r3, #0
 80039aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039b6:	4690      	mov	r8, r2
 80039b8:	4699      	mov	r9, r3
 80039ba:	4623      	mov	r3, r4
 80039bc:	eb18 0303 	adds.w	r3, r8, r3
 80039c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80039c4:	462b      	mov	r3, r5
 80039c6:	eb49 0303 	adc.w	r3, r9, r3
 80039ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80039ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80039de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80039e2:	460b      	mov	r3, r1
 80039e4:	18db      	adds	r3, r3, r3
 80039e6:	653b      	str	r3, [r7, #80]	; 0x50
 80039e8:	4613      	mov	r3, r2
 80039ea:	eb42 0303 	adc.w	r3, r2, r3
 80039ee:	657b      	str	r3, [r7, #84]	; 0x54
 80039f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80039f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80039f8:	f7fc fc4a 	bl	8000290 <__aeabi_uldivmod>
 80039fc:	4602      	mov	r2, r0
 80039fe:	460b      	mov	r3, r1
 8003a00:	4b61      	ldr	r3, [pc, #388]	; (8003b88 <UART_SetConfig+0x2d4>)
 8003a02:	fba3 2302 	umull	r2, r3, r3, r2
 8003a06:	095b      	lsrs	r3, r3, #5
 8003a08:	011c      	lsls	r4, r3, #4
 8003a0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a14:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a1c:	4642      	mov	r2, r8
 8003a1e:	464b      	mov	r3, r9
 8003a20:	1891      	adds	r1, r2, r2
 8003a22:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a24:	415b      	adcs	r3, r3
 8003a26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a2c:	4641      	mov	r1, r8
 8003a2e:	eb12 0a01 	adds.w	sl, r2, r1
 8003a32:	4649      	mov	r1, r9
 8003a34:	eb43 0b01 	adc.w	fp, r3, r1
 8003a38:	f04f 0200 	mov.w	r2, #0
 8003a3c:	f04f 0300 	mov.w	r3, #0
 8003a40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a4c:	4692      	mov	sl, r2
 8003a4e:	469b      	mov	fp, r3
 8003a50:	4643      	mov	r3, r8
 8003a52:	eb1a 0303 	adds.w	r3, sl, r3
 8003a56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a5a:	464b      	mov	r3, r9
 8003a5c:	eb4b 0303 	adc.w	r3, fp, r3
 8003a60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a70:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a78:	460b      	mov	r3, r1
 8003a7a:	18db      	adds	r3, r3, r3
 8003a7c:	643b      	str	r3, [r7, #64]	; 0x40
 8003a7e:	4613      	mov	r3, r2
 8003a80:	eb42 0303 	adc.w	r3, r2, r3
 8003a84:	647b      	str	r3, [r7, #68]	; 0x44
 8003a86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003a8e:	f7fc fbff 	bl	8000290 <__aeabi_uldivmod>
 8003a92:	4602      	mov	r2, r0
 8003a94:	460b      	mov	r3, r1
 8003a96:	4611      	mov	r1, r2
 8003a98:	4b3b      	ldr	r3, [pc, #236]	; (8003b88 <UART_SetConfig+0x2d4>)
 8003a9a:	fba3 2301 	umull	r2, r3, r3, r1
 8003a9e:	095b      	lsrs	r3, r3, #5
 8003aa0:	2264      	movs	r2, #100	; 0x64
 8003aa2:	fb02 f303 	mul.w	r3, r2, r3
 8003aa6:	1acb      	subs	r3, r1, r3
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003aae:	4b36      	ldr	r3, [pc, #216]	; (8003b88 <UART_SetConfig+0x2d4>)
 8003ab0:	fba3 2302 	umull	r2, r3, r3, r2
 8003ab4:	095b      	lsrs	r3, r3, #5
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003abc:	441c      	add	r4, r3
 8003abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ac8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003acc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003ad0:	4642      	mov	r2, r8
 8003ad2:	464b      	mov	r3, r9
 8003ad4:	1891      	adds	r1, r2, r2
 8003ad6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ad8:	415b      	adcs	r3, r3
 8003ada:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003adc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ae0:	4641      	mov	r1, r8
 8003ae2:	1851      	adds	r1, r2, r1
 8003ae4:	6339      	str	r1, [r7, #48]	; 0x30
 8003ae6:	4649      	mov	r1, r9
 8003ae8:	414b      	adcs	r3, r1
 8003aea:	637b      	str	r3, [r7, #52]	; 0x34
 8003aec:	f04f 0200 	mov.w	r2, #0
 8003af0:	f04f 0300 	mov.w	r3, #0
 8003af4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003af8:	4659      	mov	r1, fp
 8003afa:	00cb      	lsls	r3, r1, #3
 8003afc:	4651      	mov	r1, sl
 8003afe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b02:	4651      	mov	r1, sl
 8003b04:	00ca      	lsls	r2, r1, #3
 8003b06:	4610      	mov	r0, r2
 8003b08:	4619      	mov	r1, r3
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	4642      	mov	r2, r8
 8003b0e:	189b      	adds	r3, r3, r2
 8003b10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b14:	464b      	mov	r3, r9
 8003b16:	460a      	mov	r2, r1
 8003b18:	eb42 0303 	adc.w	r3, r2, r3
 8003b1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b2c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b34:	460b      	mov	r3, r1
 8003b36:	18db      	adds	r3, r3, r3
 8003b38:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	eb42 0303 	adc.w	r3, r2, r3
 8003b40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b4a:	f7fc fba1 	bl	8000290 <__aeabi_uldivmod>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	460b      	mov	r3, r1
 8003b52:	4b0d      	ldr	r3, [pc, #52]	; (8003b88 <UART_SetConfig+0x2d4>)
 8003b54:	fba3 1302 	umull	r1, r3, r3, r2
 8003b58:	095b      	lsrs	r3, r3, #5
 8003b5a:	2164      	movs	r1, #100	; 0x64
 8003b5c:	fb01 f303 	mul.w	r3, r1, r3
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	3332      	adds	r3, #50	; 0x32
 8003b66:	4a08      	ldr	r2, [pc, #32]	; (8003b88 <UART_SetConfig+0x2d4>)
 8003b68:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6c:	095b      	lsrs	r3, r3, #5
 8003b6e:	f003 0207 	and.w	r2, r3, #7
 8003b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4422      	add	r2, r4
 8003b7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b7c:	e106      	b.n	8003d8c <UART_SetConfig+0x4d8>
 8003b7e:	bf00      	nop
 8003b80:	40011000 	.word	0x40011000
 8003b84:	40011400 	.word	0x40011400
 8003b88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b90:	2200      	movs	r2, #0
 8003b92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b96:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003b9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003b9e:	4642      	mov	r2, r8
 8003ba0:	464b      	mov	r3, r9
 8003ba2:	1891      	adds	r1, r2, r2
 8003ba4:	6239      	str	r1, [r7, #32]
 8003ba6:	415b      	adcs	r3, r3
 8003ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8003baa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bae:	4641      	mov	r1, r8
 8003bb0:	1854      	adds	r4, r2, r1
 8003bb2:	4649      	mov	r1, r9
 8003bb4:	eb43 0501 	adc.w	r5, r3, r1
 8003bb8:	f04f 0200 	mov.w	r2, #0
 8003bbc:	f04f 0300 	mov.w	r3, #0
 8003bc0:	00eb      	lsls	r3, r5, #3
 8003bc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bc6:	00e2      	lsls	r2, r4, #3
 8003bc8:	4614      	mov	r4, r2
 8003bca:	461d      	mov	r5, r3
 8003bcc:	4643      	mov	r3, r8
 8003bce:	18e3      	adds	r3, r4, r3
 8003bd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003bd4:	464b      	mov	r3, r9
 8003bd6:	eb45 0303 	adc.w	r3, r5, r3
 8003bda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003bea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bee:	f04f 0200 	mov.w	r2, #0
 8003bf2:	f04f 0300 	mov.w	r3, #0
 8003bf6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003bfa:	4629      	mov	r1, r5
 8003bfc:	008b      	lsls	r3, r1, #2
 8003bfe:	4621      	mov	r1, r4
 8003c00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c04:	4621      	mov	r1, r4
 8003c06:	008a      	lsls	r2, r1, #2
 8003c08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c0c:	f7fc fb40 	bl	8000290 <__aeabi_uldivmod>
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	4b60      	ldr	r3, [pc, #384]	; (8003d98 <UART_SetConfig+0x4e4>)
 8003c16:	fba3 2302 	umull	r2, r3, r3, r2
 8003c1a:	095b      	lsrs	r3, r3, #5
 8003c1c:	011c      	lsls	r4, r3, #4
 8003c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c22:	2200      	movs	r2, #0
 8003c24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c30:	4642      	mov	r2, r8
 8003c32:	464b      	mov	r3, r9
 8003c34:	1891      	adds	r1, r2, r2
 8003c36:	61b9      	str	r1, [r7, #24]
 8003c38:	415b      	adcs	r3, r3
 8003c3a:	61fb      	str	r3, [r7, #28]
 8003c3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c40:	4641      	mov	r1, r8
 8003c42:	1851      	adds	r1, r2, r1
 8003c44:	6139      	str	r1, [r7, #16]
 8003c46:	4649      	mov	r1, r9
 8003c48:	414b      	adcs	r3, r1
 8003c4a:	617b      	str	r3, [r7, #20]
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	f04f 0300 	mov.w	r3, #0
 8003c54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c58:	4659      	mov	r1, fp
 8003c5a:	00cb      	lsls	r3, r1, #3
 8003c5c:	4651      	mov	r1, sl
 8003c5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c62:	4651      	mov	r1, sl
 8003c64:	00ca      	lsls	r2, r1, #3
 8003c66:	4610      	mov	r0, r2
 8003c68:	4619      	mov	r1, r3
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	4642      	mov	r2, r8
 8003c6e:	189b      	adds	r3, r3, r2
 8003c70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c74:	464b      	mov	r3, r9
 8003c76:	460a      	mov	r2, r1
 8003c78:	eb42 0303 	adc.w	r3, r2, r3
 8003c7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c8a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c8c:	f04f 0200 	mov.w	r2, #0
 8003c90:	f04f 0300 	mov.w	r3, #0
 8003c94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003c98:	4649      	mov	r1, r9
 8003c9a:	008b      	lsls	r3, r1, #2
 8003c9c:	4641      	mov	r1, r8
 8003c9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ca2:	4641      	mov	r1, r8
 8003ca4:	008a      	lsls	r2, r1, #2
 8003ca6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003caa:	f7fc faf1 	bl	8000290 <__aeabi_uldivmod>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	4611      	mov	r1, r2
 8003cb4:	4b38      	ldr	r3, [pc, #224]	; (8003d98 <UART_SetConfig+0x4e4>)
 8003cb6:	fba3 2301 	umull	r2, r3, r3, r1
 8003cba:	095b      	lsrs	r3, r3, #5
 8003cbc:	2264      	movs	r2, #100	; 0x64
 8003cbe:	fb02 f303 	mul.w	r3, r2, r3
 8003cc2:	1acb      	subs	r3, r1, r3
 8003cc4:	011b      	lsls	r3, r3, #4
 8003cc6:	3332      	adds	r3, #50	; 0x32
 8003cc8:	4a33      	ldr	r2, [pc, #204]	; (8003d98 <UART_SetConfig+0x4e4>)
 8003cca:	fba2 2303 	umull	r2, r3, r2, r3
 8003cce:	095b      	lsrs	r3, r3, #5
 8003cd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cd4:	441c      	add	r4, r3
 8003cd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cda:	2200      	movs	r2, #0
 8003cdc:	673b      	str	r3, [r7, #112]	; 0x70
 8003cde:	677a      	str	r2, [r7, #116]	; 0x74
 8003ce0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003ce4:	4642      	mov	r2, r8
 8003ce6:	464b      	mov	r3, r9
 8003ce8:	1891      	adds	r1, r2, r2
 8003cea:	60b9      	str	r1, [r7, #8]
 8003cec:	415b      	adcs	r3, r3
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cf4:	4641      	mov	r1, r8
 8003cf6:	1851      	adds	r1, r2, r1
 8003cf8:	6039      	str	r1, [r7, #0]
 8003cfa:	4649      	mov	r1, r9
 8003cfc:	414b      	adcs	r3, r1
 8003cfe:	607b      	str	r3, [r7, #4]
 8003d00:	f04f 0200 	mov.w	r2, #0
 8003d04:	f04f 0300 	mov.w	r3, #0
 8003d08:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d0c:	4659      	mov	r1, fp
 8003d0e:	00cb      	lsls	r3, r1, #3
 8003d10:	4651      	mov	r1, sl
 8003d12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d16:	4651      	mov	r1, sl
 8003d18:	00ca      	lsls	r2, r1, #3
 8003d1a:	4610      	mov	r0, r2
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	4603      	mov	r3, r0
 8003d20:	4642      	mov	r2, r8
 8003d22:	189b      	adds	r3, r3, r2
 8003d24:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d26:	464b      	mov	r3, r9
 8003d28:	460a      	mov	r2, r1
 8003d2a:	eb42 0303 	adc.w	r3, r2, r3
 8003d2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	663b      	str	r3, [r7, #96]	; 0x60
 8003d3a:	667a      	str	r2, [r7, #100]	; 0x64
 8003d3c:	f04f 0200 	mov.w	r2, #0
 8003d40:	f04f 0300 	mov.w	r3, #0
 8003d44:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d48:	4649      	mov	r1, r9
 8003d4a:	008b      	lsls	r3, r1, #2
 8003d4c:	4641      	mov	r1, r8
 8003d4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d52:	4641      	mov	r1, r8
 8003d54:	008a      	lsls	r2, r1, #2
 8003d56:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d5a:	f7fc fa99 	bl	8000290 <__aeabi_uldivmod>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	460b      	mov	r3, r1
 8003d62:	4b0d      	ldr	r3, [pc, #52]	; (8003d98 <UART_SetConfig+0x4e4>)
 8003d64:	fba3 1302 	umull	r1, r3, r3, r2
 8003d68:	095b      	lsrs	r3, r3, #5
 8003d6a:	2164      	movs	r1, #100	; 0x64
 8003d6c:	fb01 f303 	mul.w	r3, r1, r3
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	011b      	lsls	r3, r3, #4
 8003d74:	3332      	adds	r3, #50	; 0x32
 8003d76:	4a08      	ldr	r2, [pc, #32]	; (8003d98 <UART_SetConfig+0x4e4>)
 8003d78:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7c:	095b      	lsrs	r3, r3, #5
 8003d7e:	f003 020f 	and.w	r2, r3, #15
 8003d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4422      	add	r2, r4
 8003d8a:	609a      	str	r2, [r3, #8]
}
 8003d8c:	bf00      	nop
 8003d8e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d92:	46bd      	mov	sp, r7
 8003d94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d98:	51eb851f 	.word	0x51eb851f

08003d9c <siprintf>:
 8003d9c:	b40e      	push	{r1, r2, r3}
 8003d9e:	b500      	push	{lr}
 8003da0:	b09c      	sub	sp, #112	; 0x70
 8003da2:	ab1d      	add	r3, sp, #116	; 0x74
 8003da4:	9002      	str	r0, [sp, #8]
 8003da6:	9006      	str	r0, [sp, #24]
 8003da8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003dac:	4809      	ldr	r0, [pc, #36]	; (8003dd4 <siprintf+0x38>)
 8003dae:	9107      	str	r1, [sp, #28]
 8003db0:	9104      	str	r1, [sp, #16]
 8003db2:	4909      	ldr	r1, [pc, #36]	; (8003dd8 <siprintf+0x3c>)
 8003db4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003db8:	9105      	str	r1, [sp, #20]
 8003dba:	6800      	ldr	r0, [r0, #0]
 8003dbc:	9301      	str	r3, [sp, #4]
 8003dbe:	a902      	add	r1, sp, #8
 8003dc0:	f000 f992 	bl	80040e8 <_svfiprintf_r>
 8003dc4:	9b02      	ldr	r3, [sp, #8]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	701a      	strb	r2, [r3, #0]
 8003dca:	b01c      	add	sp, #112	; 0x70
 8003dcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003dd0:	b003      	add	sp, #12
 8003dd2:	4770      	bx	lr
 8003dd4:	20000058 	.word	0x20000058
 8003dd8:	ffff0208 	.word	0xffff0208

08003ddc <memset>:
 8003ddc:	4402      	add	r2, r0
 8003dde:	4603      	mov	r3, r0
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d100      	bne.n	8003de6 <memset+0xa>
 8003de4:	4770      	bx	lr
 8003de6:	f803 1b01 	strb.w	r1, [r3], #1
 8003dea:	e7f9      	b.n	8003de0 <memset+0x4>

08003dec <__errno>:
 8003dec:	4b01      	ldr	r3, [pc, #4]	; (8003df4 <__errno+0x8>)
 8003dee:	6818      	ldr	r0, [r3, #0]
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	20000058 	.word	0x20000058

08003df8 <__libc_init_array>:
 8003df8:	b570      	push	{r4, r5, r6, lr}
 8003dfa:	4d0d      	ldr	r5, [pc, #52]	; (8003e30 <__libc_init_array+0x38>)
 8003dfc:	4c0d      	ldr	r4, [pc, #52]	; (8003e34 <__libc_init_array+0x3c>)
 8003dfe:	1b64      	subs	r4, r4, r5
 8003e00:	10a4      	asrs	r4, r4, #2
 8003e02:	2600      	movs	r6, #0
 8003e04:	42a6      	cmp	r6, r4
 8003e06:	d109      	bne.n	8003e1c <__libc_init_array+0x24>
 8003e08:	4d0b      	ldr	r5, [pc, #44]	; (8003e38 <__libc_init_array+0x40>)
 8003e0a:	4c0c      	ldr	r4, [pc, #48]	; (8003e3c <__libc_init_array+0x44>)
 8003e0c:	f000 fc6a 	bl	80046e4 <_init>
 8003e10:	1b64      	subs	r4, r4, r5
 8003e12:	10a4      	asrs	r4, r4, #2
 8003e14:	2600      	movs	r6, #0
 8003e16:	42a6      	cmp	r6, r4
 8003e18:	d105      	bne.n	8003e26 <__libc_init_array+0x2e>
 8003e1a:	bd70      	pop	{r4, r5, r6, pc}
 8003e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e20:	4798      	blx	r3
 8003e22:	3601      	adds	r6, #1
 8003e24:	e7ee      	b.n	8003e04 <__libc_init_array+0xc>
 8003e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e2a:	4798      	blx	r3
 8003e2c:	3601      	adds	r6, #1
 8003e2e:	e7f2      	b.n	8003e16 <__libc_init_array+0x1e>
 8003e30:	0800475c 	.word	0x0800475c
 8003e34:	0800475c 	.word	0x0800475c
 8003e38:	0800475c 	.word	0x0800475c
 8003e3c:	08004760 	.word	0x08004760

08003e40 <__retarget_lock_acquire_recursive>:
 8003e40:	4770      	bx	lr

08003e42 <__retarget_lock_release_recursive>:
 8003e42:	4770      	bx	lr

08003e44 <_free_r>:
 8003e44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e46:	2900      	cmp	r1, #0
 8003e48:	d044      	beq.n	8003ed4 <_free_r+0x90>
 8003e4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e4e:	9001      	str	r0, [sp, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f1a1 0404 	sub.w	r4, r1, #4
 8003e56:	bfb8      	it	lt
 8003e58:	18e4      	addlt	r4, r4, r3
 8003e5a:	f000 f8df 	bl	800401c <__malloc_lock>
 8003e5e:	4a1e      	ldr	r2, [pc, #120]	; (8003ed8 <_free_r+0x94>)
 8003e60:	9801      	ldr	r0, [sp, #4]
 8003e62:	6813      	ldr	r3, [r2, #0]
 8003e64:	b933      	cbnz	r3, 8003e74 <_free_r+0x30>
 8003e66:	6063      	str	r3, [r4, #4]
 8003e68:	6014      	str	r4, [r2, #0]
 8003e6a:	b003      	add	sp, #12
 8003e6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e70:	f000 b8da 	b.w	8004028 <__malloc_unlock>
 8003e74:	42a3      	cmp	r3, r4
 8003e76:	d908      	bls.n	8003e8a <_free_r+0x46>
 8003e78:	6825      	ldr	r5, [r4, #0]
 8003e7a:	1961      	adds	r1, r4, r5
 8003e7c:	428b      	cmp	r3, r1
 8003e7e:	bf01      	itttt	eq
 8003e80:	6819      	ldreq	r1, [r3, #0]
 8003e82:	685b      	ldreq	r3, [r3, #4]
 8003e84:	1949      	addeq	r1, r1, r5
 8003e86:	6021      	streq	r1, [r4, #0]
 8003e88:	e7ed      	b.n	8003e66 <_free_r+0x22>
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	b10b      	cbz	r3, 8003e94 <_free_r+0x50>
 8003e90:	42a3      	cmp	r3, r4
 8003e92:	d9fa      	bls.n	8003e8a <_free_r+0x46>
 8003e94:	6811      	ldr	r1, [r2, #0]
 8003e96:	1855      	adds	r5, r2, r1
 8003e98:	42a5      	cmp	r5, r4
 8003e9a:	d10b      	bne.n	8003eb4 <_free_r+0x70>
 8003e9c:	6824      	ldr	r4, [r4, #0]
 8003e9e:	4421      	add	r1, r4
 8003ea0:	1854      	adds	r4, r2, r1
 8003ea2:	42a3      	cmp	r3, r4
 8003ea4:	6011      	str	r1, [r2, #0]
 8003ea6:	d1e0      	bne.n	8003e6a <_free_r+0x26>
 8003ea8:	681c      	ldr	r4, [r3, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	6053      	str	r3, [r2, #4]
 8003eae:	440c      	add	r4, r1
 8003eb0:	6014      	str	r4, [r2, #0]
 8003eb2:	e7da      	b.n	8003e6a <_free_r+0x26>
 8003eb4:	d902      	bls.n	8003ebc <_free_r+0x78>
 8003eb6:	230c      	movs	r3, #12
 8003eb8:	6003      	str	r3, [r0, #0]
 8003eba:	e7d6      	b.n	8003e6a <_free_r+0x26>
 8003ebc:	6825      	ldr	r5, [r4, #0]
 8003ebe:	1961      	adds	r1, r4, r5
 8003ec0:	428b      	cmp	r3, r1
 8003ec2:	bf04      	itt	eq
 8003ec4:	6819      	ldreq	r1, [r3, #0]
 8003ec6:	685b      	ldreq	r3, [r3, #4]
 8003ec8:	6063      	str	r3, [r4, #4]
 8003eca:	bf04      	itt	eq
 8003ecc:	1949      	addeq	r1, r1, r5
 8003ece:	6021      	streq	r1, [r4, #0]
 8003ed0:	6054      	str	r4, [r2, #4]
 8003ed2:	e7ca      	b.n	8003e6a <_free_r+0x26>
 8003ed4:	b003      	add	sp, #12
 8003ed6:	bd30      	pop	{r4, r5, pc}
 8003ed8:	200002e8 	.word	0x200002e8

08003edc <sbrk_aligned>:
 8003edc:	b570      	push	{r4, r5, r6, lr}
 8003ede:	4e0e      	ldr	r6, [pc, #56]	; (8003f18 <sbrk_aligned+0x3c>)
 8003ee0:	460c      	mov	r4, r1
 8003ee2:	6831      	ldr	r1, [r6, #0]
 8003ee4:	4605      	mov	r5, r0
 8003ee6:	b911      	cbnz	r1, 8003eee <sbrk_aligned+0x12>
 8003ee8:	f000 fba6 	bl	8004638 <_sbrk_r>
 8003eec:	6030      	str	r0, [r6, #0]
 8003eee:	4621      	mov	r1, r4
 8003ef0:	4628      	mov	r0, r5
 8003ef2:	f000 fba1 	bl	8004638 <_sbrk_r>
 8003ef6:	1c43      	adds	r3, r0, #1
 8003ef8:	d00a      	beq.n	8003f10 <sbrk_aligned+0x34>
 8003efa:	1cc4      	adds	r4, r0, #3
 8003efc:	f024 0403 	bic.w	r4, r4, #3
 8003f00:	42a0      	cmp	r0, r4
 8003f02:	d007      	beq.n	8003f14 <sbrk_aligned+0x38>
 8003f04:	1a21      	subs	r1, r4, r0
 8003f06:	4628      	mov	r0, r5
 8003f08:	f000 fb96 	bl	8004638 <_sbrk_r>
 8003f0c:	3001      	adds	r0, #1
 8003f0e:	d101      	bne.n	8003f14 <sbrk_aligned+0x38>
 8003f10:	f04f 34ff 	mov.w	r4, #4294967295
 8003f14:	4620      	mov	r0, r4
 8003f16:	bd70      	pop	{r4, r5, r6, pc}
 8003f18:	200002ec 	.word	0x200002ec

08003f1c <_malloc_r>:
 8003f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f20:	1ccd      	adds	r5, r1, #3
 8003f22:	f025 0503 	bic.w	r5, r5, #3
 8003f26:	3508      	adds	r5, #8
 8003f28:	2d0c      	cmp	r5, #12
 8003f2a:	bf38      	it	cc
 8003f2c:	250c      	movcc	r5, #12
 8003f2e:	2d00      	cmp	r5, #0
 8003f30:	4607      	mov	r7, r0
 8003f32:	db01      	blt.n	8003f38 <_malloc_r+0x1c>
 8003f34:	42a9      	cmp	r1, r5
 8003f36:	d905      	bls.n	8003f44 <_malloc_r+0x28>
 8003f38:	230c      	movs	r3, #12
 8003f3a:	603b      	str	r3, [r7, #0]
 8003f3c:	2600      	movs	r6, #0
 8003f3e:	4630      	mov	r0, r6
 8003f40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004018 <_malloc_r+0xfc>
 8003f48:	f000 f868 	bl	800401c <__malloc_lock>
 8003f4c:	f8d8 3000 	ldr.w	r3, [r8]
 8003f50:	461c      	mov	r4, r3
 8003f52:	bb5c      	cbnz	r4, 8003fac <_malloc_r+0x90>
 8003f54:	4629      	mov	r1, r5
 8003f56:	4638      	mov	r0, r7
 8003f58:	f7ff ffc0 	bl	8003edc <sbrk_aligned>
 8003f5c:	1c43      	adds	r3, r0, #1
 8003f5e:	4604      	mov	r4, r0
 8003f60:	d155      	bne.n	800400e <_malloc_r+0xf2>
 8003f62:	f8d8 4000 	ldr.w	r4, [r8]
 8003f66:	4626      	mov	r6, r4
 8003f68:	2e00      	cmp	r6, #0
 8003f6a:	d145      	bne.n	8003ff8 <_malloc_r+0xdc>
 8003f6c:	2c00      	cmp	r4, #0
 8003f6e:	d048      	beq.n	8004002 <_malloc_r+0xe6>
 8003f70:	6823      	ldr	r3, [r4, #0]
 8003f72:	4631      	mov	r1, r6
 8003f74:	4638      	mov	r0, r7
 8003f76:	eb04 0903 	add.w	r9, r4, r3
 8003f7a:	f000 fb5d 	bl	8004638 <_sbrk_r>
 8003f7e:	4581      	cmp	r9, r0
 8003f80:	d13f      	bne.n	8004002 <_malloc_r+0xe6>
 8003f82:	6821      	ldr	r1, [r4, #0]
 8003f84:	1a6d      	subs	r5, r5, r1
 8003f86:	4629      	mov	r1, r5
 8003f88:	4638      	mov	r0, r7
 8003f8a:	f7ff ffa7 	bl	8003edc <sbrk_aligned>
 8003f8e:	3001      	adds	r0, #1
 8003f90:	d037      	beq.n	8004002 <_malloc_r+0xe6>
 8003f92:	6823      	ldr	r3, [r4, #0]
 8003f94:	442b      	add	r3, r5
 8003f96:	6023      	str	r3, [r4, #0]
 8003f98:	f8d8 3000 	ldr.w	r3, [r8]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d038      	beq.n	8004012 <_malloc_r+0xf6>
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	42a2      	cmp	r2, r4
 8003fa4:	d12b      	bne.n	8003ffe <_malloc_r+0xe2>
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	605a      	str	r2, [r3, #4]
 8003faa:	e00f      	b.n	8003fcc <_malloc_r+0xb0>
 8003fac:	6822      	ldr	r2, [r4, #0]
 8003fae:	1b52      	subs	r2, r2, r5
 8003fb0:	d41f      	bmi.n	8003ff2 <_malloc_r+0xd6>
 8003fb2:	2a0b      	cmp	r2, #11
 8003fb4:	d917      	bls.n	8003fe6 <_malloc_r+0xca>
 8003fb6:	1961      	adds	r1, r4, r5
 8003fb8:	42a3      	cmp	r3, r4
 8003fba:	6025      	str	r5, [r4, #0]
 8003fbc:	bf18      	it	ne
 8003fbe:	6059      	strne	r1, [r3, #4]
 8003fc0:	6863      	ldr	r3, [r4, #4]
 8003fc2:	bf08      	it	eq
 8003fc4:	f8c8 1000 	streq.w	r1, [r8]
 8003fc8:	5162      	str	r2, [r4, r5]
 8003fca:	604b      	str	r3, [r1, #4]
 8003fcc:	4638      	mov	r0, r7
 8003fce:	f104 060b 	add.w	r6, r4, #11
 8003fd2:	f000 f829 	bl	8004028 <__malloc_unlock>
 8003fd6:	f026 0607 	bic.w	r6, r6, #7
 8003fda:	1d23      	adds	r3, r4, #4
 8003fdc:	1af2      	subs	r2, r6, r3
 8003fde:	d0ae      	beq.n	8003f3e <_malloc_r+0x22>
 8003fe0:	1b9b      	subs	r3, r3, r6
 8003fe2:	50a3      	str	r3, [r4, r2]
 8003fe4:	e7ab      	b.n	8003f3e <_malloc_r+0x22>
 8003fe6:	42a3      	cmp	r3, r4
 8003fe8:	6862      	ldr	r2, [r4, #4]
 8003fea:	d1dd      	bne.n	8003fa8 <_malloc_r+0x8c>
 8003fec:	f8c8 2000 	str.w	r2, [r8]
 8003ff0:	e7ec      	b.n	8003fcc <_malloc_r+0xb0>
 8003ff2:	4623      	mov	r3, r4
 8003ff4:	6864      	ldr	r4, [r4, #4]
 8003ff6:	e7ac      	b.n	8003f52 <_malloc_r+0x36>
 8003ff8:	4634      	mov	r4, r6
 8003ffa:	6876      	ldr	r6, [r6, #4]
 8003ffc:	e7b4      	b.n	8003f68 <_malloc_r+0x4c>
 8003ffe:	4613      	mov	r3, r2
 8004000:	e7cc      	b.n	8003f9c <_malloc_r+0x80>
 8004002:	230c      	movs	r3, #12
 8004004:	603b      	str	r3, [r7, #0]
 8004006:	4638      	mov	r0, r7
 8004008:	f000 f80e 	bl	8004028 <__malloc_unlock>
 800400c:	e797      	b.n	8003f3e <_malloc_r+0x22>
 800400e:	6025      	str	r5, [r4, #0]
 8004010:	e7dc      	b.n	8003fcc <_malloc_r+0xb0>
 8004012:	605b      	str	r3, [r3, #4]
 8004014:	deff      	udf	#255	; 0xff
 8004016:	bf00      	nop
 8004018:	200002e8 	.word	0x200002e8

0800401c <__malloc_lock>:
 800401c:	4801      	ldr	r0, [pc, #4]	; (8004024 <__malloc_lock+0x8>)
 800401e:	f7ff bf0f 	b.w	8003e40 <__retarget_lock_acquire_recursive>
 8004022:	bf00      	nop
 8004024:	200002e4 	.word	0x200002e4

08004028 <__malloc_unlock>:
 8004028:	4801      	ldr	r0, [pc, #4]	; (8004030 <__malloc_unlock+0x8>)
 800402a:	f7ff bf0a 	b.w	8003e42 <__retarget_lock_release_recursive>
 800402e:	bf00      	nop
 8004030:	200002e4 	.word	0x200002e4

08004034 <__ssputs_r>:
 8004034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004038:	688e      	ldr	r6, [r1, #8]
 800403a:	461f      	mov	r7, r3
 800403c:	42be      	cmp	r6, r7
 800403e:	680b      	ldr	r3, [r1, #0]
 8004040:	4682      	mov	sl, r0
 8004042:	460c      	mov	r4, r1
 8004044:	4690      	mov	r8, r2
 8004046:	d82c      	bhi.n	80040a2 <__ssputs_r+0x6e>
 8004048:	898a      	ldrh	r2, [r1, #12]
 800404a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800404e:	d026      	beq.n	800409e <__ssputs_r+0x6a>
 8004050:	6965      	ldr	r5, [r4, #20]
 8004052:	6909      	ldr	r1, [r1, #16]
 8004054:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004058:	eba3 0901 	sub.w	r9, r3, r1
 800405c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004060:	1c7b      	adds	r3, r7, #1
 8004062:	444b      	add	r3, r9
 8004064:	106d      	asrs	r5, r5, #1
 8004066:	429d      	cmp	r5, r3
 8004068:	bf38      	it	cc
 800406a:	461d      	movcc	r5, r3
 800406c:	0553      	lsls	r3, r2, #21
 800406e:	d527      	bpl.n	80040c0 <__ssputs_r+0x8c>
 8004070:	4629      	mov	r1, r5
 8004072:	f7ff ff53 	bl	8003f1c <_malloc_r>
 8004076:	4606      	mov	r6, r0
 8004078:	b360      	cbz	r0, 80040d4 <__ssputs_r+0xa0>
 800407a:	6921      	ldr	r1, [r4, #16]
 800407c:	464a      	mov	r2, r9
 800407e:	f000 faeb 	bl	8004658 <memcpy>
 8004082:	89a3      	ldrh	r3, [r4, #12]
 8004084:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800408c:	81a3      	strh	r3, [r4, #12]
 800408e:	6126      	str	r6, [r4, #16]
 8004090:	6165      	str	r5, [r4, #20]
 8004092:	444e      	add	r6, r9
 8004094:	eba5 0509 	sub.w	r5, r5, r9
 8004098:	6026      	str	r6, [r4, #0]
 800409a:	60a5      	str	r5, [r4, #8]
 800409c:	463e      	mov	r6, r7
 800409e:	42be      	cmp	r6, r7
 80040a0:	d900      	bls.n	80040a4 <__ssputs_r+0x70>
 80040a2:	463e      	mov	r6, r7
 80040a4:	6820      	ldr	r0, [r4, #0]
 80040a6:	4632      	mov	r2, r6
 80040a8:	4641      	mov	r1, r8
 80040aa:	f000 faab 	bl	8004604 <memmove>
 80040ae:	68a3      	ldr	r3, [r4, #8]
 80040b0:	1b9b      	subs	r3, r3, r6
 80040b2:	60a3      	str	r3, [r4, #8]
 80040b4:	6823      	ldr	r3, [r4, #0]
 80040b6:	4433      	add	r3, r6
 80040b8:	6023      	str	r3, [r4, #0]
 80040ba:	2000      	movs	r0, #0
 80040bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040c0:	462a      	mov	r2, r5
 80040c2:	f000 fad7 	bl	8004674 <_realloc_r>
 80040c6:	4606      	mov	r6, r0
 80040c8:	2800      	cmp	r0, #0
 80040ca:	d1e0      	bne.n	800408e <__ssputs_r+0x5a>
 80040cc:	6921      	ldr	r1, [r4, #16]
 80040ce:	4650      	mov	r0, sl
 80040d0:	f7ff feb8 	bl	8003e44 <_free_r>
 80040d4:	230c      	movs	r3, #12
 80040d6:	f8ca 3000 	str.w	r3, [sl]
 80040da:	89a3      	ldrh	r3, [r4, #12]
 80040dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040e0:	81a3      	strh	r3, [r4, #12]
 80040e2:	f04f 30ff 	mov.w	r0, #4294967295
 80040e6:	e7e9      	b.n	80040bc <__ssputs_r+0x88>

080040e8 <_svfiprintf_r>:
 80040e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ec:	4698      	mov	r8, r3
 80040ee:	898b      	ldrh	r3, [r1, #12]
 80040f0:	061b      	lsls	r3, r3, #24
 80040f2:	b09d      	sub	sp, #116	; 0x74
 80040f4:	4607      	mov	r7, r0
 80040f6:	460d      	mov	r5, r1
 80040f8:	4614      	mov	r4, r2
 80040fa:	d50e      	bpl.n	800411a <_svfiprintf_r+0x32>
 80040fc:	690b      	ldr	r3, [r1, #16]
 80040fe:	b963      	cbnz	r3, 800411a <_svfiprintf_r+0x32>
 8004100:	2140      	movs	r1, #64	; 0x40
 8004102:	f7ff ff0b 	bl	8003f1c <_malloc_r>
 8004106:	6028      	str	r0, [r5, #0]
 8004108:	6128      	str	r0, [r5, #16]
 800410a:	b920      	cbnz	r0, 8004116 <_svfiprintf_r+0x2e>
 800410c:	230c      	movs	r3, #12
 800410e:	603b      	str	r3, [r7, #0]
 8004110:	f04f 30ff 	mov.w	r0, #4294967295
 8004114:	e0d0      	b.n	80042b8 <_svfiprintf_r+0x1d0>
 8004116:	2340      	movs	r3, #64	; 0x40
 8004118:	616b      	str	r3, [r5, #20]
 800411a:	2300      	movs	r3, #0
 800411c:	9309      	str	r3, [sp, #36]	; 0x24
 800411e:	2320      	movs	r3, #32
 8004120:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004124:	f8cd 800c 	str.w	r8, [sp, #12]
 8004128:	2330      	movs	r3, #48	; 0x30
 800412a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80042d0 <_svfiprintf_r+0x1e8>
 800412e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004132:	f04f 0901 	mov.w	r9, #1
 8004136:	4623      	mov	r3, r4
 8004138:	469a      	mov	sl, r3
 800413a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800413e:	b10a      	cbz	r2, 8004144 <_svfiprintf_r+0x5c>
 8004140:	2a25      	cmp	r2, #37	; 0x25
 8004142:	d1f9      	bne.n	8004138 <_svfiprintf_r+0x50>
 8004144:	ebba 0b04 	subs.w	fp, sl, r4
 8004148:	d00b      	beq.n	8004162 <_svfiprintf_r+0x7a>
 800414a:	465b      	mov	r3, fp
 800414c:	4622      	mov	r2, r4
 800414e:	4629      	mov	r1, r5
 8004150:	4638      	mov	r0, r7
 8004152:	f7ff ff6f 	bl	8004034 <__ssputs_r>
 8004156:	3001      	adds	r0, #1
 8004158:	f000 80a9 	beq.w	80042ae <_svfiprintf_r+0x1c6>
 800415c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800415e:	445a      	add	r2, fp
 8004160:	9209      	str	r2, [sp, #36]	; 0x24
 8004162:	f89a 3000 	ldrb.w	r3, [sl]
 8004166:	2b00      	cmp	r3, #0
 8004168:	f000 80a1 	beq.w	80042ae <_svfiprintf_r+0x1c6>
 800416c:	2300      	movs	r3, #0
 800416e:	f04f 32ff 	mov.w	r2, #4294967295
 8004172:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004176:	f10a 0a01 	add.w	sl, sl, #1
 800417a:	9304      	str	r3, [sp, #16]
 800417c:	9307      	str	r3, [sp, #28]
 800417e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004182:	931a      	str	r3, [sp, #104]	; 0x68
 8004184:	4654      	mov	r4, sl
 8004186:	2205      	movs	r2, #5
 8004188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800418c:	4850      	ldr	r0, [pc, #320]	; (80042d0 <_svfiprintf_r+0x1e8>)
 800418e:	f7fc f82f 	bl	80001f0 <memchr>
 8004192:	9a04      	ldr	r2, [sp, #16]
 8004194:	b9d8      	cbnz	r0, 80041ce <_svfiprintf_r+0xe6>
 8004196:	06d0      	lsls	r0, r2, #27
 8004198:	bf44      	itt	mi
 800419a:	2320      	movmi	r3, #32
 800419c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041a0:	0711      	lsls	r1, r2, #28
 80041a2:	bf44      	itt	mi
 80041a4:	232b      	movmi	r3, #43	; 0x2b
 80041a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041aa:	f89a 3000 	ldrb.w	r3, [sl]
 80041ae:	2b2a      	cmp	r3, #42	; 0x2a
 80041b0:	d015      	beq.n	80041de <_svfiprintf_r+0xf6>
 80041b2:	9a07      	ldr	r2, [sp, #28]
 80041b4:	4654      	mov	r4, sl
 80041b6:	2000      	movs	r0, #0
 80041b8:	f04f 0c0a 	mov.w	ip, #10
 80041bc:	4621      	mov	r1, r4
 80041be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041c2:	3b30      	subs	r3, #48	; 0x30
 80041c4:	2b09      	cmp	r3, #9
 80041c6:	d94d      	bls.n	8004264 <_svfiprintf_r+0x17c>
 80041c8:	b1b0      	cbz	r0, 80041f8 <_svfiprintf_r+0x110>
 80041ca:	9207      	str	r2, [sp, #28]
 80041cc:	e014      	b.n	80041f8 <_svfiprintf_r+0x110>
 80041ce:	eba0 0308 	sub.w	r3, r0, r8
 80041d2:	fa09 f303 	lsl.w	r3, r9, r3
 80041d6:	4313      	orrs	r3, r2
 80041d8:	9304      	str	r3, [sp, #16]
 80041da:	46a2      	mov	sl, r4
 80041dc:	e7d2      	b.n	8004184 <_svfiprintf_r+0x9c>
 80041de:	9b03      	ldr	r3, [sp, #12]
 80041e0:	1d19      	adds	r1, r3, #4
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	9103      	str	r1, [sp, #12]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	bfbb      	ittet	lt
 80041ea:	425b      	neglt	r3, r3
 80041ec:	f042 0202 	orrlt.w	r2, r2, #2
 80041f0:	9307      	strge	r3, [sp, #28]
 80041f2:	9307      	strlt	r3, [sp, #28]
 80041f4:	bfb8      	it	lt
 80041f6:	9204      	strlt	r2, [sp, #16]
 80041f8:	7823      	ldrb	r3, [r4, #0]
 80041fa:	2b2e      	cmp	r3, #46	; 0x2e
 80041fc:	d10c      	bne.n	8004218 <_svfiprintf_r+0x130>
 80041fe:	7863      	ldrb	r3, [r4, #1]
 8004200:	2b2a      	cmp	r3, #42	; 0x2a
 8004202:	d134      	bne.n	800426e <_svfiprintf_r+0x186>
 8004204:	9b03      	ldr	r3, [sp, #12]
 8004206:	1d1a      	adds	r2, r3, #4
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	9203      	str	r2, [sp, #12]
 800420c:	2b00      	cmp	r3, #0
 800420e:	bfb8      	it	lt
 8004210:	f04f 33ff 	movlt.w	r3, #4294967295
 8004214:	3402      	adds	r4, #2
 8004216:	9305      	str	r3, [sp, #20]
 8004218:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80042e0 <_svfiprintf_r+0x1f8>
 800421c:	7821      	ldrb	r1, [r4, #0]
 800421e:	2203      	movs	r2, #3
 8004220:	4650      	mov	r0, sl
 8004222:	f7fb ffe5 	bl	80001f0 <memchr>
 8004226:	b138      	cbz	r0, 8004238 <_svfiprintf_r+0x150>
 8004228:	9b04      	ldr	r3, [sp, #16]
 800422a:	eba0 000a 	sub.w	r0, r0, sl
 800422e:	2240      	movs	r2, #64	; 0x40
 8004230:	4082      	lsls	r2, r0
 8004232:	4313      	orrs	r3, r2
 8004234:	3401      	adds	r4, #1
 8004236:	9304      	str	r3, [sp, #16]
 8004238:	f814 1b01 	ldrb.w	r1, [r4], #1
 800423c:	4825      	ldr	r0, [pc, #148]	; (80042d4 <_svfiprintf_r+0x1ec>)
 800423e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004242:	2206      	movs	r2, #6
 8004244:	f7fb ffd4 	bl	80001f0 <memchr>
 8004248:	2800      	cmp	r0, #0
 800424a:	d038      	beq.n	80042be <_svfiprintf_r+0x1d6>
 800424c:	4b22      	ldr	r3, [pc, #136]	; (80042d8 <_svfiprintf_r+0x1f0>)
 800424e:	bb1b      	cbnz	r3, 8004298 <_svfiprintf_r+0x1b0>
 8004250:	9b03      	ldr	r3, [sp, #12]
 8004252:	3307      	adds	r3, #7
 8004254:	f023 0307 	bic.w	r3, r3, #7
 8004258:	3308      	adds	r3, #8
 800425a:	9303      	str	r3, [sp, #12]
 800425c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800425e:	4433      	add	r3, r6
 8004260:	9309      	str	r3, [sp, #36]	; 0x24
 8004262:	e768      	b.n	8004136 <_svfiprintf_r+0x4e>
 8004264:	fb0c 3202 	mla	r2, ip, r2, r3
 8004268:	460c      	mov	r4, r1
 800426a:	2001      	movs	r0, #1
 800426c:	e7a6      	b.n	80041bc <_svfiprintf_r+0xd4>
 800426e:	2300      	movs	r3, #0
 8004270:	3401      	adds	r4, #1
 8004272:	9305      	str	r3, [sp, #20]
 8004274:	4619      	mov	r1, r3
 8004276:	f04f 0c0a 	mov.w	ip, #10
 800427a:	4620      	mov	r0, r4
 800427c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004280:	3a30      	subs	r2, #48	; 0x30
 8004282:	2a09      	cmp	r2, #9
 8004284:	d903      	bls.n	800428e <_svfiprintf_r+0x1a6>
 8004286:	2b00      	cmp	r3, #0
 8004288:	d0c6      	beq.n	8004218 <_svfiprintf_r+0x130>
 800428a:	9105      	str	r1, [sp, #20]
 800428c:	e7c4      	b.n	8004218 <_svfiprintf_r+0x130>
 800428e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004292:	4604      	mov	r4, r0
 8004294:	2301      	movs	r3, #1
 8004296:	e7f0      	b.n	800427a <_svfiprintf_r+0x192>
 8004298:	ab03      	add	r3, sp, #12
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	462a      	mov	r2, r5
 800429e:	4b0f      	ldr	r3, [pc, #60]	; (80042dc <_svfiprintf_r+0x1f4>)
 80042a0:	a904      	add	r1, sp, #16
 80042a2:	4638      	mov	r0, r7
 80042a4:	f3af 8000 	nop.w
 80042a8:	1c42      	adds	r2, r0, #1
 80042aa:	4606      	mov	r6, r0
 80042ac:	d1d6      	bne.n	800425c <_svfiprintf_r+0x174>
 80042ae:	89ab      	ldrh	r3, [r5, #12]
 80042b0:	065b      	lsls	r3, r3, #25
 80042b2:	f53f af2d 	bmi.w	8004110 <_svfiprintf_r+0x28>
 80042b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042b8:	b01d      	add	sp, #116	; 0x74
 80042ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042be:	ab03      	add	r3, sp, #12
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	462a      	mov	r2, r5
 80042c4:	4b05      	ldr	r3, [pc, #20]	; (80042dc <_svfiprintf_r+0x1f4>)
 80042c6:	a904      	add	r1, sp, #16
 80042c8:	4638      	mov	r0, r7
 80042ca:	f000 f879 	bl	80043c0 <_printf_i>
 80042ce:	e7eb      	b.n	80042a8 <_svfiprintf_r+0x1c0>
 80042d0:	08004720 	.word	0x08004720
 80042d4:	0800472a 	.word	0x0800472a
 80042d8:	00000000 	.word	0x00000000
 80042dc:	08004035 	.word	0x08004035
 80042e0:	08004726 	.word	0x08004726

080042e4 <_printf_common>:
 80042e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042e8:	4616      	mov	r6, r2
 80042ea:	4699      	mov	r9, r3
 80042ec:	688a      	ldr	r2, [r1, #8]
 80042ee:	690b      	ldr	r3, [r1, #16]
 80042f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042f4:	4293      	cmp	r3, r2
 80042f6:	bfb8      	it	lt
 80042f8:	4613      	movlt	r3, r2
 80042fa:	6033      	str	r3, [r6, #0]
 80042fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004300:	4607      	mov	r7, r0
 8004302:	460c      	mov	r4, r1
 8004304:	b10a      	cbz	r2, 800430a <_printf_common+0x26>
 8004306:	3301      	adds	r3, #1
 8004308:	6033      	str	r3, [r6, #0]
 800430a:	6823      	ldr	r3, [r4, #0]
 800430c:	0699      	lsls	r1, r3, #26
 800430e:	bf42      	ittt	mi
 8004310:	6833      	ldrmi	r3, [r6, #0]
 8004312:	3302      	addmi	r3, #2
 8004314:	6033      	strmi	r3, [r6, #0]
 8004316:	6825      	ldr	r5, [r4, #0]
 8004318:	f015 0506 	ands.w	r5, r5, #6
 800431c:	d106      	bne.n	800432c <_printf_common+0x48>
 800431e:	f104 0a19 	add.w	sl, r4, #25
 8004322:	68e3      	ldr	r3, [r4, #12]
 8004324:	6832      	ldr	r2, [r6, #0]
 8004326:	1a9b      	subs	r3, r3, r2
 8004328:	42ab      	cmp	r3, r5
 800432a:	dc26      	bgt.n	800437a <_printf_common+0x96>
 800432c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004330:	1e13      	subs	r3, r2, #0
 8004332:	6822      	ldr	r2, [r4, #0]
 8004334:	bf18      	it	ne
 8004336:	2301      	movne	r3, #1
 8004338:	0692      	lsls	r2, r2, #26
 800433a:	d42b      	bmi.n	8004394 <_printf_common+0xb0>
 800433c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004340:	4649      	mov	r1, r9
 8004342:	4638      	mov	r0, r7
 8004344:	47c0      	blx	r8
 8004346:	3001      	adds	r0, #1
 8004348:	d01e      	beq.n	8004388 <_printf_common+0xa4>
 800434a:	6823      	ldr	r3, [r4, #0]
 800434c:	6922      	ldr	r2, [r4, #16]
 800434e:	f003 0306 	and.w	r3, r3, #6
 8004352:	2b04      	cmp	r3, #4
 8004354:	bf02      	ittt	eq
 8004356:	68e5      	ldreq	r5, [r4, #12]
 8004358:	6833      	ldreq	r3, [r6, #0]
 800435a:	1aed      	subeq	r5, r5, r3
 800435c:	68a3      	ldr	r3, [r4, #8]
 800435e:	bf0c      	ite	eq
 8004360:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004364:	2500      	movne	r5, #0
 8004366:	4293      	cmp	r3, r2
 8004368:	bfc4      	itt	gt
 800436a:	1a9b      	subgt	r3, r3, r2
 800436c:	18ed      	addgt	r5, r5, r3
 800436e:	2600      	movs	r6, #0
 8004370:	341a      	adds	r4, #26
 8004372:	42b5      	cmp	r5, r6
 8004374:	d11a      	bne.n	80043ac <_printf_common+0xc8>
 8004376:	2000      	movs	r0, #0
 8004378:	e008      	b.n	800438c <_printf_common+0xa8>
 800437a:	2301      	movs	r3, #1
 800437c:	4652      	mov	r2, sl
 800437e:	4649      	mov	r1, r9
 8004380:	4638      	mov	r0, r7
 8004382:	47c0      	blx	r8
 8004384:	3001      	adds	r0, #1
 8004386:	d103      	bne.n	8004390 <_printf_common+0xac>
 8004388:	f04f 30ff 	mov.w	r0, #4294967295
 800438c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004390:	3501      	adds	r5, #1
 8004392:	e7c6      	b.n	8004322 <_printf_common+0x3e>
 8004394:	18e1      	adds	r1, r4, r3
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	2030      	movs	r0, #48	; 0x30
 800439a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800439e:	4422      	add	r2, r4
 80043a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043a8:	3302      	adds	r3, #2
 80043aa:	e7c7      	b.n	800433c <_printf_common+0x58>
 80043ac:	2301      	movs	r3, #1
 80043ae:	4622      	mov	r2, r4
 80043b0:	4649      	mov	r1, r9
 80043b2:	4638      	mov	r0, r7
 80043b4:	47c0      	blx	r8
 80043b6:	3001      	adds	r0, #1
 80043b8:	d0e6      	beq.n	8004388 <_printf_common+0xa4>
 80043ba:	3601      	adds	r6, #1
 80043bc:	e7d9      	b.n	8004372 <_printf_common+0x8e>
	...

080043c0 <_printf_i>:
 80043c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043c4:	7e0f      	ldrb	r7, [r1, #24]
 80043c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80043c8:	2f78      	cmp	r7, #120	; 0x78
 80043ca:	4691      	mov	r9, r2
 80043cc:	4680      	mov	r8, r0
 80043ce:	460c      	mov	r4, r1
 80043d0:	469a      	mov	sl, r3
 80043d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80043d6:	d807      	bhi.n	80043e8 <_printf_i+0x28>
 80043d8:	2f62      	cmp	r7, #98	; 0x62
 80043da:	d80a      	bhi.n	80043f2 <_printf_i+0x32>
 80043dc:	2f00      	cmp	r7, #0
 80043de:	f000 80d4 	beq.w	800458a <_printf_i+0x1ca>
 80043e2:	2f58      	cmp	r7, #88	; 0x58
 80043e4:	f000 80c0 	beq.w	8004568 <_printf_i+0x1a8>
 80043e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043f0:	e03a      	b.n	8004468 <_printf_i+0xa8>
 80043f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043f6:	2b15      	cmp	r3, #21
 80043f8:	d8f6      	bhi.n	80043e8 <_printf_i+0x28>
 80043fa:	a101      	add	r1, pc, #4	; (adr r1, 8004400 <_printf_i+0x40>)
 80043fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004400:	08004459 	.word	0x08004459
 8004404:	0800446d 	.word	0x0800446d
 8004408:	080043e9 	.word	0x080043e9
 800440c:	080043e9 	.word	0x080043e9
 8004410:	080043e9 	.word	0x080043e9
 8004414:	080043e9 	.word	0x080043e9
 8004418:	0800446d 	.word	0x0800446d
 800441c:	080043e9 	.word	0x080043e9
 8004420:	080043e9 	.word	0x080043e9
 8004424:	080043e9 	.word	0x080043e9
 8004428:	080043e9 	.word	0x080043e9
 800442c:	08004571 	.word	0x08004571
 8004430:	08004499 	.word	0x08004499
 8004434:	0800452b 	.word	0x0800452b
 8004438:	080043e9 	.word	0x080043e9
 800443c:	080043e9 	.word	0x080043e9
 8004440:	08004593 	.word	0x08004593
 8004444:	080043e9 	.word	0x080043e9
 8004448:	08004499 	.word	0x08004499
 800444c:	080043e9 	.word	0x080043e9
 8004450:	080043e9 	.word	0x080043e9
 8004454:	08004533 	.word	0x08004533
 8004458:	682b      	ldr	r3, [r5, #0]
 800445a:	1d1a      	adds	r2, r3, #4
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	602a      	str	r2, [r5, #0]
 8004460:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004464:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004468:	2301      	movs	r3, #1
 800446a:	e09f      	b.n	80045ac <_printf_i+0x1ec>
 800446c:	6820      	ldr	r0, [r4, #0]
 800446e:	682b      	ldr	r3, [r5, #0]
 8004470:	0607      	lsls	r7, r0, #24
 8004472:	f103 0104 	add.w	r1, r3, #4
 8004476:	6029      	str	r1, [r5, #0]
 8004478:	d501      	bpl.n	800447e <_printf_i+0xbe>
 800447a:	681e      	ldr	r6, [r3, #0]
 800447c:	e003      	b.n	8004486 <_printf_i+0xc6>
 800447e:	0646      	lsls	r6, r0, #25
 8004480:	d5fb      	bpl.n	800447a <_printf_i+0xba>
 8004482:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004486:	2e00      	cmp	r6, #0
 8004488:	da03      	bge.n	8004492 <_printf_i+0xd2>
 800448a:	232d      	movs	r3, #45	; 0x2d
 800448c:	4276      	negs	r6, r6
 800448e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004492:	485a      	ldr	r0, [pc, #360]	; (80045fc <_printf_i+0x23c>)
 8004494:	230a      	movs	r3, #10
 8004496:	e012      	b.n	80044be <_printf_i+0xfe>
 8004498:	682b      	ldr	r3, [r5, #0]
 800449a:	6820      	ldr	r0, [r4, #0]
 800449c:	1d19      	adds	r1, r3, #4
 800449e:	6029      	str	r1, [r5, #0]
 80044a0:	0605      	lsls	r5, r0, #24
 80044a2:	d501      	bpl.n	80044a8 <_printf_i+0xe8>
 80044a4:	681e      	ldr	r6, [r3, #0]
 80044a6:	e002      	b.n	80044ae <_printf_i+0xee>
 80044a8:	0641      	lsls	r1, r0, #25
 80044aa:	d5fb      	bpl.n	80044a4 <_printf_i+0xe4>
 80044ac:	881e      	ldrh	r6, [r3, #0]
 80044ae:	4853      	ldr	r0, [pc, #332]	; (80045fc <_printf_i+0x23c>)
 80044b0:	2f6f      	cmp	r7, #111	; 0x6f
 80044b2:	bf0c      	ite	eq
 80044b4:	2308      	moveq	r3, #8
 80044b6:	230a      	movne	r3, #10
 80044b8:	2100      	movs	r1, #0
 80044ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044be:	6865      	ldr	r5, [r4, #4]
 80044c0:	60a5      	str	r5, [r4, #8]
 80044c2:	2d00      	cmp	r5, #0
 80044c4:	bfa2      	ittt	ge
 80044c6:	6821      	ldrge	r1, [r4, #0]
 80044c8:	f021 0104 	bicge.w	r1, r1, #4
 80044cc:	6021      	strge	r1, [r4, #0]
 80044ce:	b90e      	cbnz	r6, 80044d4 <_printf_i+0x114>
 80044d0:	2d00      	cmp	r5, #0
 80044d2:	d04b      	beq.n	800456c <_printf_i+0x1ac>
 80044d4:	4615      	mov	r5, r2
 80044d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80044da:	fb03 6711 	mls	r7, r3, r1, r6
 80044de:	5dc7      	ldrb	r7, [r0, r7]
 80044e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80044e4:	4637      	mov	r7, r6
 80044e6:	42bb      	cmp	r3, r7
 80044e8:	460e      	mov	r6, r1
 80044ea:	d9f4      	bls.n	80044d6 <_printf_i+0x116>
 80044ec:	2b08      	cmp	r3, #8
 80044ee:	d10b      	bne.n	8004508 <_printf_i+0x148>
 80044f0:	6823      	ldr	r3, [r4, #0]
 80044f2:	07de      	lsls	r6, r3, #31
 80044f4:	d508      	bpl.n	8004508 <_printf_i+0x148>
 80044f6:	6923      	ldr	r3, [r4, #16]
 80044f8:	6861      	ldr	r1, [r4, #4]
 80044fa:	4299      	cmp	r1, r3
 80044fc:	bfde      	ittt	le
 80044fe:	2330      	movle	r3, #48	; 0x30
 8004500:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004504:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004508:	1b52      	subs	r2, r2, r5
 800450a:	6122      	str	r2, [r4, #16]
 800450c:	f8cd a000 	str.w	sl, [sp]
 8004510:	464b      	mov	r3, r9
 8004512:	aa03      	add	r2, sp, #12
 8004514:	4621      	mov	r1, r4
 8004516:	4640      	mov	r0, r8
 8004518:	f7ff fee4 	bl	80042e4 <_printf_common>
 800451c:	3001      	adds	r0, #1
 800451e:	d14a      	bne.n	80045b6 <_printf_i+0x1f6>
 8004520:	f04f 30ff 	mov.w	r0, #4294967295
 8004524:	b004      	add	sp, #16
 8004526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800452a:	6823      	ldr	r3, [r4, #0]
 800452c:	f043 0320 	orr.w	r3, r3, #32
 8004530:	6023      	str	r3, [r4, #0]
 8004532:	4833      	ldr	r0, [pc, #204]	; (8004600 <_printf_i+0x240>)
 8004534:	2778      	movs	r7, #120	; 0x78
 8004536:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800453a:	6823      	ldr	r3, [r4, #0]
 800453c:	6829      	ldr	r1, [r5, #0]
 800453e:	061f      	lsls	r7, r3, #24
 8004540:	f851 6b04 	ldr.w	r6, [r1], #4
 8004544:	d402      	bmi.n	800454c <_printf_i+0x18c>
 8004546:	065f      	lsls	r7, r3, #25
 8004548:	bf48      	it	mi
 800454a:	b2b6      	uxthmi	r6, r6
 800454c:	07df      	lsls	r7, r3, #31
 800454e:	bf48      	it	mi
 8004550:	f043 0320 	orrmi.w	r3, r3, #32
 8004554:	6029      	str	r1, [r5, #0]
 8004556:	bf48      	it	mi
 8004558:	6023      	strmi	r3, [r4, #0]
 800455a:	b91e      	cbnz	r6, 8004564 <_printf_i+0x1a4>
 800455c:	6823      	ldr	r3, [r4, #0]
 800455e:	f023 0320 	bic.w	r3, r3, #32
 8004562:	6023      	str	r3, [r4, #0]
 8004564:	2310      	movs	r3, #16
 8004566:	e7a7      	b.n	80044b8 <_printf_i+0xf8>
 8004568:	4824      	ldr	r0, [pc, #144]	; (80045fc <_printf_i+0x23c>)
 800456a:	e7e4      	b.n	8004536 <_printf_i+0x176>
 800456c:	4615      	mov	r5, r2
 800456e:	e7bd      	b.n	80044ec <_printf_i+0x12c>
 8004570:	682b      	ldr	r3, [r5, #0]
 8004572:	6826      	ldr	r6, [r4, #0]
 8004574:	6961      	ldr	r1, [r4, #20]
 8004576:	1d18      	adds	r0, r3, #4
 8004578:	6028      	str	r0, [r5, #0]
 800457a:	0635      	lsls	r5, r6, #24
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	d501      	bpl.n	8004584 <_printf_i+0x1c4>
 8004580:	6019      	str	r1, [r3, #0]
 8004582:	e002      	b.n	800458a <_printf_i+0x1ca>
 8004584:	0670      	lsls	r0, r6, #25
 8004586:	d5fb      	bpl.n	8004580 <_printf_i+0x1c0>
 8004588:	8019      	strh	r1, [r3, #0]
 800458a:	2300      	movs	r3, #0
 800458c:	6123      	str	r3, [r4, #16]
 800458e:	4615      	mov	r5, r2
 8004590:	e7bc      	b.n	800450c <_printf_i+0x14c>
 8004592:	682b      	ldr	r3, [r5, #0]
 8004594:	1d1a      	adds	r2, r3, #4
 8004596:	602a      	str	r2, [r5, #0]
 8004598:	681d      	ldr	r5, [r3, #0]
 800459a:	6862      	ldr	r2, [r4, #4]
 800459c:	2100      	movs	r1, #0
 800459e:	4628      	mov	r0, r5
 80045a0:	f7fb fe26 	bl	80001f0 <memchr>
 80045a4:	b108      	cbz	r0, 80045aa <_printf_i+0x1ea>
 80045a6:	1b40      	subs	r0, r0, r5
 80045a8:	6060      	str	r0, [r4, #4]
 80045aa:	6863      	ldr	r3, [r4, #4]
 80045ac:	6123      	str	r3, [r4, #16]
 80045ae:	2300      	movs	r3, #0
 80045b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045b4:	e7aa      	b.n	800450c <_printf_i+0x14c>
 80045b6:	6923      	ldr	r3, [r4, #16]
 80045b8:	462a      	mov	r2, r5
 80045ba:	4649      	mov	r1, r9
 80045bc:	4640      	mov	r0, r8
 80045be:	47d0      	blx	sl
 80045c0:	3001      	adds	r0, #1
 80045c2:	d0ad      	beq.n	8004520 <_printf_i+0x160>
 80045c4:	6823      	ldr	r3, [r4, #0]
 80045c6:	079b      	lsls	r3, r3, #30
 80045c8:	d413      	bmi.n	80045f2 <_printf_i+0x232>
 80045ca:	68e0      	ldr	r0, [r4, #12]
 80045cc:	9b03      	ldr	r3, [sp, #12]
 80045ce:	4298      	cmp	r0, r3
 80045d0:	bfb8      	it	lt
 80045d2:	4618      	movlt	r0, r3
 80045d4:	e7a6      	b.n	8004524 <_printf_i+0x164>
 80045d6:	2301      	movs	r3, #1
 80045d8:	4632      	mov	r2, r6
 80045da:	4649      	mov	r1, r9
 80045dc:	4640      	mov	r0, r8
 80045de:	47d0      	blx	sl
 80045e0:	3001      	adds	r0, #1
 80045e2:	d09d      	beq.n	8004520 <_printf_i+0x160>
 80045e4:	3501      	adds	r5, #1
 80045e6:	68e3      	ldr	r3, [r4, #12]
 80045e8:	9903      	ldr	r1, [sp, #12]
 80045ea:	1a5b      	subs	r3, r3, r1
 80045ec:	42ab      	cmp	r3, r5
 80045ee:	dcf2      	bgt.n	80045d6 <_printf_i+0x216>
 80045f0:	e7eb      	b.n	80045ca <_printf_i+0x20a>
 80045f2:	2500      	movs	r5, #0
 80045f4:	f104 0619 	add.w	r6, r4, #25
 80045f8:	e7f5      	b.n	80045e6 <_printf_i+0x226>
 80045fa:	bf00      	nop
 80045fc:	08004731 	.word	0x08004731
 8004600:	08004742 	.word	0x08004742

08004604 <memmove>:
 8004604:	4288      	cmp	r0, r1
 8004606:	b510      	push	{r4, lr}
 8004608:	eb01 0402 	add.w	r4, r1, r2
 800460c:	d902      	bls.n	8004614 <memmove+0x10>
 800460e:	4284      	cmp	r4, r0
 8004610:	4623      	mov	r3, r4
 8004612:	d807      	bhi.n	8004624 <memmove+0x20>
 8004614:	1e43      	subs	r3, r0, #1
 8004616:	42a1      	cmp	r1, r4
 8004618:	d008      	beq.n	800462c <memmove+0x28>
 800461a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800461e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004622:	e7f8      	b.n	8004616 <memmove+0x12>
 8004624:	4402      	add	r2, r0
 8004626:	4601      	mov	r1, r0
 8004628:	428a      	cmp	r2, r1
 800462a:	d100      	bne.n	800462e <memmove+0x2a>
 800462c:	bd10      	pop	{r4, pc}
 800462e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004632:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004636:	e7f7      	b.n	8004628 <memmove+0x24>

08004638 <_sbrk_r>:
 8004638:	b538      	push	{r3, r4, r5, lr}
 800463a:	4d06      	ldr	r5, [pc, #24]	; (8004654 <_sbrk_r+0x1c>)
 800463c:	2300      	movs	r3, #0
 800463e:	4604      	mov	r4, r0
 8004640:	4608      	mov	r0, r1
 8004642:	602b      	str	r3, [r5, #0]
 8004644:	f7fc fc30 	bl	8000ea8 <_sbrk>
 8004648:	1c43      	adds	r3, r0, #1
 800464a:	d102      	bne.n	8004652 <_sbrk_r+0x1a>
 800464c:	682b      	ldr	r3, [r5, #0]
 800464e:	b103      	cbz	r3, 8004652 <_sbrk_r+0x1a>
 8004650:	6023      	str	r3, [r4, #0]
 8004652:	bd38      	pop	{r3, r4, r5, pc}
 8004654:	200002e0 	.word	0x200002e0

08004658 <memcpy>:
 8004658:	440a      	add	r2, r1
 800465a:	4291      	cmp	r1, r2
 800465c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004660:	d100      	bne.n	8004664 <memcpy+0xc>
 8004662:	4770      	bx	lr
 8004664:	b510      	push	{r4, lr}
 8004666:	f811 4b01 	ldrb.w	r4, [r1], #1
 800466a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800466e:	4291      	cmp	r1, r2
 8004670:	d1f9      	bne.n	8004666 <memcpy+0xe>
 8004672:	bd10      	pop	{r4, pc}

08004674 <_realloc_r>:
 8004674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004678:	4680      	mov	r8, r0
 800467a:	4614      	mov	r4, r2
 800467c:	460e      	mov	r6, r1
 800467e:	b921      	cbnz	r1, 800468a <_realloc_r+0x16>
 8004680:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004684:	4611      	mov	r1, r2
 8004686:	f7ff bc49 	b.w	8003f1c <_malloc_r>
 800468a:	b92a      	cbnz	r2, 8004698 <_realloc_r+0x24>
 800468c:	f7ff fbda 	bl	8003e44 <_free_r>
 8004690:	4625      	mov	r5, r4
 8004692:	4628      	mov	r0, r5
 8004694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004698:	f000 f81b 	bl	80046d2 <_malloc_usable_size_r>
 800469c:	4284      	cmp	r4, r0
 800469e:	4607      	mov	r7, r0
 80046a0:	d802      	bhi.n	80046a8 <_realloc_r+0x34>
 80046a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80046a6:	d812      	bhi.n	80046ce <_realloc_r+0x5a>
 80046a8:	4621      	mov	r1, r4
 80046aa:	4640      	mov	r0, r8
 80046ac:	f7ff fc36 	bl	8003f1c <_malloc_r>
 80046b0:	4605      	mov	r5, r0
 80046b2:	2800      	cmp	r0, #0
 80046b4:	d0ed      	beq.n	8004692 <_realloc_r+0x1e>
 80046b6:	42bc      	cmp	r4, r7
 80046b8:	4622      	mov	r2, r4
 80046ba:	4631      	mov	r1, r6
 80046bc:	bf28      	it	cs
 80046be:	463a      	movcs	r2, r7
 80046c0:	f7ff ffca 	bl	8004658 <memcpy>
 80046c4:	4631      	mov	r1, r6
 80046c6:	4640      	mov	r0, r8
 80046c8:	f7ff fbbc 	bl	8003e44 <_free_r>
 80046cc:	e7e1      	b.n	8004692 <_realloc_r+0x1e>
 80046ce:	4635      	mov	r5, r6
 80046d0:	e7df      	b.n	8004692 <_realloc_r+0x1e>

080046d2 <_malloc_usable_size_r>:
 80046d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046d6:	1f18      	subs	r0, r3, #4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	bfbc      	itt	lt
 80046dc:	580b      	ldrlt	r3, [r1, r0]
 80046de:	18c0      	addlt	r0, r0, r3
 80046e0:	4770      	bx	lr
	...

080046e4 <_init>:
 80046e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046e6:	bf00      	nop
 80046e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ea:	bc08      	pop	{r3}
 80046ec:	469e      	mov	lr, r3
 80046ee:	4770      	bx	lr

080046f0 <_fini>:
 80046f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f2:	bf00      	nop
 80046f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046f6:	bc08      	pop	{r3}
 80046f8:	469e      	mov	lr, r3
 80046fa:	4770      	bx	lr
